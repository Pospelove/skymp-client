#pragma once

#include "../stdafx.h"
#include "Costile2.h"
#include "Value.h"

#undef GetForm
#undef AddForm

namespace cd
{
	void ModFavorPoints(Value<Actor> self, SInt32 iFavorPoints, std::function<void(void)> callback = {});
	void ModFavorPointsWithGlobal(Value<Actor> self, Value<TESGlobal> FavorPointsGlobal, std::function<void(void)> callback = {});
	void MakePlayerFriend(Value<Actor> self, std::function<void(void)> callback = {});
	void AddPerk(Value<Actor> self, Value<BGSPerk> akPerk, std::function<void(void)> callback = {});
	bool AddShout(Value<Actor> self, Value<TESShout> akShout, std::function<void(bool)> callback = {});
	bool AddSpell(Value<Actor> self, Value<SpellItem> akSpell, bool abVerbose, std::function<void(bool)> callback = {});
	void AllowBleedoutDialogue(Value<Actor> self, bool abCanTalk, std::function<void(void)> callback = {});
	void AllowPCDialogue(Value<Actor> self, bool abTalk, std::function<void(void)> callback = {});
	void AttachAshPile(Value<Actor> self, Value<TESForm> akAshPileBase, std::function<void(void)> callback = {});
	bool CanFlyHere(Value<Actor> self, std::function<void(bool)> callback = {});
	void ClearArrested(Value<Actor> self, std::function<void(void)> callback = {});
	void ClearExpressionOverride(Value<Actor> self, std::function<void(void)> callback = {});
	void ClearExtraArrows(Value<Actor> self, std::function<void(void)> callback = {});
	void ClearForcedLandingMarker(Value<Actor> self, std::function<void(void)> callback = {});
	void ClearKeepOffsetFromActor(Value<Actor> self, std::function<void(void)> callback = {});
	void ClearLookAt(Value<Actor> self, std::function<void(void)> callback = {});
	
	bool Dismount(Value<Actor> self, std::function<void(bool)> callback = {});
	void DispelAllSpells(Value<Actor> self, std::function<void(void)> callback = {});
	bool DispelSpell(Value<Actor> self, Value<SpellItem> akSpell, std::function<void(bool)> callback = {});
	void DoCombatSpellApply(Value<Actor> self, Value<SpellItem> akSpell, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	void EnableAI(Value<Actor> self, bool abEnable, std::function<void(void)> callback = {});
	void EndDeferredKill(Value<Actor> self, std::function<void(void)> callback = {});
	void EquipItem(Value<Actor> self, Value<TESForm> akItem, bool abPreventRemoval, bool abSilent, std::function<void(void)> callback = {});
	void EquipShout(Value<Actor> self, Value<TESShout> akShout, std::function<void(void)> callback = {});
	void EquipSpell(Value<Actor> self, Value<SpellItem> akSpell, SInt32 aiSource, std::function<void(void)> callback = {});
	void EvaluatePackage(Value<Actor> self, std::function<void(void)> callback = {});
	Value<TESNPC> GetActorBase(Value<Actor> self, std::function<void(Value<TESNPC>)> callback = {});
	SInt32 GetBribeAmount(Value<Actor> self, std::function<void(SInt32)> callback = {});
	Value<TESFaction> GetCrimeFaction(Value<Actor> self, std::function<void(Value<TESFaction>)> callback = {});
	SInt32 GetCombatState(Value<Actor> self, std::function<void(SInt32)> callback = {});
	Value<Actor> GetCombatTarget(Value<Actor> self, std::function<void(Value<Actor>)> callback = {});
	Value<TESPackage> GetCurrentPackage(Value<Actor> self, std::function<void(Value<TESPackage>)> callback = {});
	Value<Actor> GetDialogueTarget(Value<Actor> self, std::function<void(Value<Actor>)> callback = {});
	SInt32 GetEquippedItemType(Value<Actor> self, SInt32 aiHand, std::function<void(SInt32)> callback = {});
	Value<TESShout> GetEquippedShout(Value<Actor> self, std::function<void(Value<TESShout>)> callback = {});
	Value<TESObjectWEAP> GetEquippedWeapon(Value<Actor> self, bool abLeftHand, std::function<void(Value<TESObjectWEAP>)> callback = {});
	Value<TESObjectARMO> GetEquippedShield(Value<Actor> self, std::function<void(Value<TESObjectARMO>)> callback = {});
	Value<SpellItem> GetEquippedSpell(Value<Actor> self, SInt32 aiSource, std::function<void(Value<SpellItem>)> callback = {});
	SInt32 GetFactionRank(Value<Actor> self, Value<TESFaction> akFaction, std::function<void(SInt32)> callback = {});
	SInt32 GetFactionReaction(Value<Actor> self, Value<Actor> akOther, std::function<void(SInt32)> callback = {});
	SInt32 GetFlyingState(Value<Actor> self, std::function<void(SInt32)> callback = {});
	Value<TESObjectREFR> GetForcedLandingMarker(Value<Actor> self, std::function<void(Value<TESObjectREFR>)> callback = {});
	SInt32 GetGoldAmount(Value<Actor> self, std::function<void(SInt32)> callback = {});
	SInt32 GetHighestRelationshipRank(Value<Actor> self, std::function<void(SInt32)> callback = {});
	Value<Actor> GetKiller(Value<Actor> self, std::function<void(Value<Actor>)> callback = {});
	SInt32 GetLevel(Value<Actor> self, std::function<void(SInt32)> callback = {});
	float GetLightLevel(Value<Actor> self, std::function<void(float)> callback = {});
	SInt32 GetLowestRelationshipRank(Value<Actor> self, std::function<void(SInt32)> callback = {});
	Value<TESNPC> GetLeveledActorBase(Value<Actor> self, std::function<void(Value<TESNPC>)> callback = {});
	bool GetNoBleedoutRecovery(Value<Actor> self, std::function<void(bool)> callback = {});
	bool GetPlayerControls(Value<Actor> self, std::function<void(bool)> callback = {});
	Value<TESRace> GetRace(Value<Actor> self, std::function<void(Value<TESRace>)> callback = {});
	SInt32 GetRelationshipRank(Value<Actor> self, Value<Actor> akOther, std::function<void(SInt32)> callback = {});
	SInt32 GetSitState(Value<Actor> self, std::function<void(SInt32)> callback = {});
	SInt32 GetSleepState(Value<Actor> self, std::function<void(SInt32)> callback = {});
	float GetVoiceRecoveryTime(Value<Actor> self, std::function<void(float)> callback = {});
	bool HasAssociation(Value<Actor> self, Value<BGSAssociationType> akAssociation, Value<Actor> akOther, std::function<void(bool)> callback = {});
	bool HasFamilyRelationship(Value<Actor> self, Value<Actor> akOther, std::function<void(bool)> callback = {});
	bool HasLOS(Value<Actor> self, Value<TESObjectREFR> akOther, std::function<void(bool)> callback = {});
	bool HasMagicEffect(Value<Actor> self, Value<EffectSetting> akEffect, std::function<void(bool)> callback = {});
	bool HasMagicEffectWithKeyword(Value<Actor> self, Value<BGSKeyword> akKeyword, std::function<void(bool)> callback = {});
	bool HasParentRelationship(Value<Actor> self, Value<Actor> akOther, std::function<void(bool)> callback = {});
	bool HasPerk(Value<Actor> self, Value<BGSPerk> akPerk, std::function<void(bool)> callback = {});
	bool HasSpell(Value<Actor> self, Value<TESForm> akForm, std::function<void(bool)> callback = {});
	bool IsAlarmed(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsAlerted(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsAllowedToFly(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsArrested(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsArrestingTarget(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsBeingRidden(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsBleedingOut(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsBribed(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsChild(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsCommandedActor(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsDead(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsDetectedBy(Value<Actor> self, Value<Actor> akOther, std::function<void(bool)> callback = {});
	bool IsDoingFavor(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsEquipped(Value<Actor> self, Value<TESForm> akItem, std::function<void(bool)> callback = {});
	bool IsEssential(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsFlying(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsGuard(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsGhost(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsHostileToActor(Value<Actor> self, Value<Actor> akActor, std::function<void(bool)> callback = {});
	bool IsInCombat(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsInFaction(Value<Actor> self, Value<TESFaction> akFaction, std::function<void(bool)> callback = {});
	bool IsInKillMove(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsIntimidated(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsOnMount(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsPlayersLastRiddenHorse(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsPlayerTeammate(Value<Actor> self, std::function<void(bool)> callback = {});
	void KeepOffsetFromActor(Value<Actor> self, Value<Actor> arTarget, float afOffsetX, float afOffsetY, float afOffsetZ, float afOffsetAngleX, float afOffsetAngleY, float afOffsetAngleZ, float afCatchUpRadius, float afFollowRadius, std::function<void(void)> callback = {});
	void Kill(Value<Actor> self, Value<Actor> akKiller, std::function<void(void)> callback = {});
	void KillEssential(Value<Actor> self, Value<Actor> akKiller, std::function<void(void)> callback = {});
	void KillSilent(Value<Actor> self, Value<Actor> akKiller, std::function<void(void)> callback = {});
	void ModFactionRank(Value<Actor> self, Value<TESFaction> akFaction, SInt32 aiMod, std::function<void(void)> callback = {});
	void MoveToPackageLocation(Value<Actor> self, std::function<void(void)> callback = {});
	void OpenInventory(Value<Actor> self, bool abForceOpen, std::function<void(void)> callback = {});
	bool PathToReference(Value<Actor> self, Value<TESObjectREFR> aTarget, float afWalkRunPercent, std::function<void(bool)> callback = {});
	bool PlayIdle(Value<Actor> self, Value<TESIdleForm> akIdle, std::function<void(bool)> callback = {});
	bool PlayIdleWithTarget(Value<Actor> self, Value<TESIdleForm> akIdle, Value<TESObjectREFR> akTarget, std::function<void(bool)> callback = {});
	void PlaySubGraphAnimation(Value<Actor> self, std::string asEventName, std::function<void(void)> callback = {});
	void RemoveFromFaction(Value<Actor> self, Value<TESFaction> akFaction, std::function<void(void)> callback = {});
	void RemoveFromAllFactions(Value<Actor> self, std::function<void(void)> callback = {});
	void RemovePerk(Value<Actor> self, Value<BGSPerk> akPerk, std::function<void(void)> callback = {});
	bool RemoveShout(Value<Actor> self, Value<TESShout> akShout, std::function<void(bool)> callback = {});
	bool RemoveSpell(Value<Actor> self, Value<SpellItem> akSpell, std::function<void(bool)> callback = {});
	void ResetHealthAndLimbs(Value<Actor> self, std::function<void(void)> callback = {});
	void Resurrect(Value<Actor> self, std::function<void(void)> callback = {});
	void SendAssaultAlarm(Value<Actor> self, std::function<void(void)> callback = {});
	void SendTrespassAlarm(Value<Actor> self, Value<Actor> akCriminal, std::function<void(void)> callback = {});
	void SetAlert(Value<Actor> self, bool abAlerted, std::function<void(void)> callback = {});
	void SetAllowFlying(Value<Actor> self, bool abAllowed, std::function<void(void)> callback = {});
	void SetAllowFlyingEx(Value<Actor> self, bool abAllowed, bool abAllowCrash, bool abAllowSearch, std::function<void(void)> callback = {});
	void SetAlpha(Value<Actor> self, float afTargetAlpha, bool abFade, std::function<void(void)> callback = {});
	void SetAttackActorOnSight(Value<Actor> self, bool abAttackOnSight, std::function<void(void)> callback = {});
	void SetBribed(Value<Actor> self, bool abBribe, std::function<void(void)> callback = {});
	void SetCrimeFaction(Value<Actor> self, Value<TESFaction> akFaction, std::function<void(void)> callback = {});
	void SetCriticalStage(Value<Actor> self, SInt32 aiStage, std::function<void(void)> callback = {});
	void SetDoingFavor(Value<Actor> self, bool abDoingFavor, std::function<void(void)> callback = {});
	void SetDontMove(Value<Actor> self, bool abDontMove, std::function<void(void)> callback = {});
	void SetExpressionOverride(Value<Actor> self, SInt32 aiMood, SInt32 aiStrength, std::function<void(void)> callback = {});
	void SetEyeTexture(Value<Actor> self, Value<BGSTextureSet> akNewTexture, std::function<void(void)> callback = {});
	void SetFactionRank(Value<Actor> self, Value<TESFaction> akFaction, SInt32 aiRank, std::function<void(void)> callback = {});
	void SetForcedLandingMarker(Value<Actor> self, Value<TESObjectREFR> aMarker, std::function<void(void)> callback = {});
	void SetGhost(Value<Actor> self, bool abIsGhost, std::function<void(void)> callback = {});
	void AddToFaction(Value<Actor> self, Value<TESFaction> akFaction, std::function<void(void)> callback = {});
	void SetHeadTracking(Value<Actor> self, bool abEnable, std::function<void(void)> callback = {});
	void SetIntimidated(Value<Actor> self, bool abIntimidate, std::function<void(void)> callback = {});
	void SetLookAt(Value<Actor> self, Value<TESObjectREFR> akTarget, bool abPathingLookAt, std::function<void(void)> callback = {});
	void SetNoBleedoutRecovery(Value<Actor> self, bool abAllowed, std::function<void(void)> callback = {});
	void SetNotShowOnStealthMeter(Value<Actor> self, bool abNotShow, std::function<void(void)> callback = {});
	void SetOutfit(Value<Actor> self, Value<BGSOutfit> akOutfit, bool abSleepOutfit, std::function<void(void)> callback = {});
	void SetPlayerControls(Value<Actor> self, bool abControls, std::function<void(void)> callback = {});
	void SetPlayerResistingArrest(Value<Actor> self, std::function<void(void)> callback = {});
	void SetPlayerTeammate(Value<Actor> self, bool abTeammate, bool abCanDoFavor, std::function<void(void)> callback = {});
	void SetRace(Value<Actor> self, Value<TESRace> akRace, std::function<void(void)> callback = {});
	void SetRelationshipRank(Value<Actor> self, Value<Actor> akOther, SInt32 aiRank, std::function<void(void)> callback = {});
	void SetRestrained(Value<Actor> self, bool abRestrained, std::function<void(void)> callback = {});
	void SetSubGraphFloatVariable(Value<Actor> self, std::string asVariableName, float afValue, std::function<void(void)> callback = {});
	void SetUnconscious(Value<Actor> self, bool abUnconscious, std::function<void(void)> callback = {});
	void SetVehicle(Value<Actor> self, Value<TESObjectREFR> akVehicle, std::function<void(void)> callback = {});
	void SetVoiceRecoveryTime(Value<Actor> self, float afTime, std::function<void(void)> callback = {});
	void ShowBarterMenu(Value<Actor> self, std::function<void(void)> callback = {});
	SInt32 ShowGiftMenu(Value<Actor> self, bool abGivingGift, Value<BGSListForm> apFilterList, bool abShowStolenItems, bool abUseFavorPoints, std::function<void(SInt32)> callback = {});
	void StartCannibal(Value<Actor> self, Value<Actor> akTarget, std::function<void(void)> callback = {});
	void StartCombat(Value<Actor> self, Value<Actor> akTarget, std::function<void(void)> callback = {});
	void StartDeferredKill(Value<Actor> self, std::function<void(void)> callback = {});
	void StartVampireFeed(Value<Actor> self, Value<Actor> akTarget, std::function<void(void)> callback = {});
	void StopCombat(Value<Actor> self, std::function<void(void)> callback = {});
	void StopCombatAlarm(Value<Actor> self, std::function<void(void)> callback = {});
	bool TrapSoul(Value<Actor> self, Value<Actor> akTarget, std::function<void(bool)> callback = {});
	void UnequipAll(Value<Actor> self, std::function<void(void)> callback = {});
	void UnequipItem(Value<Actor> self, Value<TESForm> akItem, bool abPreventEquip, bool abSilent, std::function<void(void)> callback = {});
	void UnequipItemSlot(Value<Actor> self, SInt32 aiSlot, std::function<void(void)> callback = {});
	void UnequipShout(Value<Actor> self, Value<TESShout> akShout, std::function<void(void)> callback = {});
	void UnequipSpell(Value<Actor> self, Value<SpellItem> akSpell, SInt32 aiSource, std::function<void(void)> callback = {});
	void UnLockOwnedDoorsInCell(Value<Actor> self, std::function<void(void)> callback = {});
	bool WillIntimidateSucceed(Value<Actor> self, std::function<void(bool)> callback = {});
	bool WornHasKeyword(Value<Actor> self, Value<BGSKeyword> akKeyword, std::function<void(bool)> callback = {});
	void StartSneaking(Value<Actor> self, std::function<void(void)> callback = {});
	void DrawWeapon(Value<Actor> self, std::function<void(void)> callback = {});
	void ForceMovementDirection(Value<Actor> self, float afXAngle, float afYAngle, float afZAngle, std::function<void(void)> callback = {});
	void ForceMovementSpeed(Value<Actor> self, float afSpeedMult, std::function<void(void)> callback = {});
	void ForceMovementRotationSpeed(Value<Actor> self, float afXMult, float afYMult, float afZMult, std::function<void(void)> callback = {});
	void ForceMovementDirectionRamp(Value<Actor> self, float afXAngle, float afYAngle, float afZAngle, float afRampTime, std::function<void(void)> callback = {});
	void ForceMovementSpeedRamp(Value<Actor> self, float afSpeedMult, float afRampTime, std::function<void(void)> callback = {});
	void ForceMovementRotationSpeedRamp(Value<Actor> self, float afXMult, float afYMult, float afZMult, float afRampTime, std::function<void(void)> callback = {});
	void ForceTargetDirection(Value<Actor> self, float afXAngle, float afYAngle, float afZAngle, std::function<void(void)> callback = {});
	void ForceTargetSpeed(Value<Actor> self, float afSpeed, std::function<void(void)> callback = {});
	void ForceTargetAngle(Value<Actor> self, float afXAngle, float afYAngle, float afZAngle, std::function<void(void)> callback = {});
	void ClearForcedMovement(Value<Actor> self, std::function<void(void)> callback = {});
	Value<TESForm> GetWornForm(Value<Actor> self, SInt32 slotMask, std::function<void(Value<TESForm>)> callback = {});
	SInt32 GetWornItemId(Value<Actor> self, SInt32 slotMask, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetEquippedObject(Value<Actor> self, SInt32 location, std::function<void(Value<TESForm>)> callback = {});
	SInt32 GetEquippedItemId(Value<Actor> self, SInt32 location, std::function<void(SInt32)> callback = {});
	SInt32 GetSpellCount(Value<Actor> self, std::function<void(SInt32)> callback = {});
	Value<SpellItem> GetNthSpell(Value<Actor> self, SInt32 n, std::function<void(Value<SpellItem>)> callback = {});
	void QueueNiNodeUpdate(Value<Actor> self, std::function<void(void)> callback = {});
	void RegenerateHead(Value<Actor> self, std::function<void(void)> callback = {});
	void EquipItemEx(Value<Actor> self, Value<TESForm> item, SInt32 equipSlot, bool preventUnequip, bool equipSound, std::function<void(void)> callback = {});
	void EquipItemById(Value<Actor> self, Value<TESForm> item, SInt32 itemId, SInt32 equipSlot, bool preventUnequip, bool equipSound, std::function<void(void)> callback = {});
	void UnequipItemEx(Value<Actor> self, Value<TESForm> item, SInt32 equipSlot, bool preventEquip, std::function<void(void)> callback = {});
	void ChangeHeadPart(Value<Actor> self, Value<BGSHeadPart> hPart, std::function<void(void)> callback = {});
	void ReplaceHeadPart(Value<Actor> self, Value<BGSHeadPart> oPart, Value<BGSHeadPart> newPart, std::function<void(void)> callback = {});
	void UpdateWeight(Value<Actor> self, float neckDelta, std::function<void(void)> callback = {});
	bool IsAIEnabled(Value<Actor> self, std::function<void(bool)> callback = {});
	void ResetAI(Value<Actor> self, std::function<void(void)> callback = {});
	void SheatheWeapon(Value<Actor> self, std::function<void(void)> callback = {});
	Value<TESObjectREFR> GetFurnitureReference(Value<Actor> self, std::function<void(Value<TESObjectREFR>)> callback = {});
	void SetExpressionPhoneme(Value<Actor> self, SInt32 index, float value, std::function<void(void)> callback = {});
	void SetExpressionModifier(Value<Actor> self, SInt32 index, float value, std::function<void(void)> callback = {});
	void ResetExpressionOverrides(Value<Actor> self, std::function<void(void)> callback = {});
	Value<TESClass> GetClass(Value<TESNPC> self, std::function<void(Value<TESClass>)> callback = {});
	SInt32 GetDeadCount(Value<TESNPC> self, std::function<void(SInt32)> callback = {});
	Value<BGSListForm> GetGiftFilter(Value<TESNPC> self, std::function<void(Value<BGSListForm>)> callback = {});
	Value<TESRace> GetRace(Value<TESNPC> self, std::function<void(Value<TESRace>)> callback = {});
	SInt32 GetSex(Value<TESNPC> self, std::function<void(SInt32)> callback = {});
	bool IsEssential(Value<TESNPC> self, std::function<void(bool)> callback = {});
	bool IsInvulnerable(Value<TESNPC> self, std::function<void(bool)> callback = {});
	bool IsProtected(Value<TESNPC> self, std::function<void(bool)> callback = {});
	bool IsUnique(Value<TESNPC> self, std::function<void(bool)> callback = {});
	void SetEssential(Value<TESNPC> self, bool abEssential, std::function<void(void)> callback = {});
	void SetInvulnerable(Value<TESNPC> self, bool abInvulnerable, std::function<void(void)> callback = {});
	void SetProtected(Value<TESNPC> self, bool abProtected, std::function<void(void)> callback = {});
	void SetOutfit(Value<TESNPC> self, Value<BGSOutfit> akOutfit, bool abSleepOutfit, std::function<void(void)> callback = {});
	Value<TESCombatStyle> GetCombatStyle(Value<TESNPC> self, std::function<void(Value<TESCombatStyle>)> callback = {});
	void SetCombatStyle(Value<TESNPC> self, Value<TESCombatStyle> cs, std::function<void(void)> callback = {});
	Value<BGSOutfit> GetOutfit(Value<TESNPC> self, bool bSleepOutfit, std::function<void(Value<BGSOutfit>)> callback = {});
	void SetClass(Value<TESNPC> self, Value<TESClass> c, std::function<void(void)> callback = {});
	float GetHeight(Value<TESNPC> self, std::function<void(float)> callback = {});
	void SetHeight(Value<TESNPC> self, float height, std::function<void(void)> callback = {});
	float GetWeight(Value<TESNPC> self, std::function<void(float)> callback = {});
	void SetWeight(Value<TESNPC> self, float weight, std::function<void(void)> callback = {});
	SInt32 GetNumHeadParts(Value<TESNPC> self, std::function<void(SInt32)> callback = {});
	Value<BGSHeadPart> GetNthHeadPart(Value<TESNPC> self, SInt32 slotPart, std::function<void(Value<BGSHeadPart>)> callback = {});
	void SetNthHeadPart(Value<TESNPC> self, Value<BGSHeadPart> headPart, SInt32 slotPart, std::function<void(void)> callback = {});
	SInt32 GetIndexOfHeadPartByType(Value<TESNPC> self, SInt32 type, std::function<void(SInt32)> callback = {});
	SInt32 GetNumOverlayHeadParts(Value<TESNPC> self, std::function<void(SInt32)> callback = {});
	Value<BGSHeadPart> GetNthOverlayHeadPart(Value<TESNPC> self, SInt32 slotPart, std::function<void(Value<BGSHeadPart>)> callback = {});
	SInt32 GetIndexOfOverlayHeadPartByType(Value<TESNPC> self, SInt32 type, std::function<void(SInt32)> callback = {});
	float GetFaceMorph(Value<TESNPC> self, SInt32 index, std::function<void(float)> callback = {});
	void SetFaceMorph(Value<TESNPC> self, float value, SInt32 index, std::function<void(void)> callback = {});
	SInt32 GetFacePreset(Value<TESNPC> self, SInt32 index, std::function<void(SInt32)> callback = {});
	void SetFacePreset(Value<TESNPC> self, SInt32 value, SInt32 index, std::function<void(void)> callback = {});
	Value<BGSColorForm> GetHairColor(Value<TESNPC> self, std::function<void(Value<BGSColorForm>)> callback = {});
	void SetHairColor(Value<TESNPC> self, Value<BGSColorForm> color, std::function<void(void)> callback = {});
	SInt32 GetSpellCount(Value<TESNPC> self, std::function<void(SInt32)> callback = {});
	Value<SpellItem> GetNthSpell(Value<TESNPC> self, SInt32 n, std::function<void(Value<SpellItem>)> callback = {});
	Value<BGSTextureSet> GetFaceTextureSet(Value<TESNPC> self, std::function<void(Value<BGSTextureSet>)> callback = {});
	void SetFaceTextureSet(Value<TESNPC> self, Value<BGSTextureSet> textures, std::function<void(void)> callback = {});
	Value<BGSVoiceType> GetVoiceType(Value<TESNPC> self, std::function<void(Value<BGSVoiceType>)> callback = {});
	void SetVoiceType(Value<TESNPC> self, Value<BGSVoiceType> nVoice, std::function<void(void)> callback = {});
	Value<TESObjectARMO> GetSkin(Value<TESNPC> self, std::function<void(Value<TESObjectARMO>)> callback = {});
	void SetSkin(Value<TESNPC> self, Value<TESObjectARMO> skin, std::function<void(void)> callback = {});
	Value<TESObjectARMO> GetSkinFar(Value<TESNPC> self, std::function<void(Value<TESObjectARMO>)> callback = {});
	void SetSkinFar(Value<TESNPC> self, Value<TESObjectARMO> skin, std::function<void(void)> callback = {});
	Value<TESNPC> GetTemplate(Value<TESNPC> self, std::function<void(Value<TESNPC>)> callback = {});
	Value<ActorValueInfo> GetActorValueInfoByName(std::string avName, std::function<void(Value<ActorValueInfo>)> callback = {});
	Value<ActorValueInfo> GetAVIByName(std::string avName, std::function<void(Value<ActorValueInfo>)> callback = {});
	Value<ActorValueInfo> GetActorValueInfoByID(SInt32 id, std::function<void(Value<ActorValueInfo>)> callback = {});
	Value<ActorValueInfo> GetAVIByID(SInt32 id, std::function<void(Value<ActorValueInfo>)> callback = {});
	bool IsSkill(Value<ActorValueInfo> self, std::function<void(bool)> callback = {});
	float GetSkillUseMult(Value<ActorValueInfo> self, std::function<void(float)> callback = {});
	void SetSkillUseMult(Value<ActorValueInfo> self, float value, std::function<void(void)> callback = {});
	float GetSkillOffsetMult(Value<ActorValueInfo> self, std::function<void(float)> callback = {});
	void SetSkillOffsetMult(Value<ActorValueInfo> self, float value, std::function<void(void)> callback = {});
	float GetSkillImproveMult(Value<ActorValueInfo> self, std::function<void(float)> callback = {});
	void SetSkillImproveMult(Value<ActorValueInfo> self, float value, std::function<void(void)> callback = {});
	float GetSkillImproveOffset(Value<ActorValueInfo> self, std::function<void(float)> callback = {});
	void SetSkillImproveOffset(Value<ActorValueInfo> self, float value, std::function<void(void)> callback = {});
	float GetSkillExperience(Value<ActorValueInfo> self, std::function<void(float)> callback = {});
	void SetSkillExperience(Value<ActorValueInfo> self, float exp, std::function<void(void)> callback = {});
	void AddSkillExperience(Value<ActorValueInfo> self, float exp, std::function<void(void)> callback = {});
	float GetExperienceForLevel(Value<ActorValueInfo> self, SInt32 currentLevel, std::function<void(float)> callback = {});
	SInt32 GetSkillLegendaryLevel(Value<ActorValueInfo> self, std::function<void(SInt32)> callback = {});
	void SetSkillLegendaryLevel(Value<ActorValueInfo> self, SInt32 level, std::function<void(void)> callback = {});
	void GetPerkTree(Value<ActorValueInfo> self, Value<BGSListForm> list, Value<Actor> akActor, bool unowned, bool allRanks, std::function<void(void)> callback = {});
	float GetCurrentValue(Value<ActorValueInfo> self, Value<Actor> akActor, std::function<void(float)> callback = {});
	float GetBaseValue(Value<ActorValueInfo> self, Value<Actor> akActor, std::function<void(float)> callback = {});
	float GetMaximumValue(Value<ActorValueInfo> self, Value<Actor> akActor, std::function<void(float)> callback = {});
	bool IsBolt(Value<TESAmmo> self, std::function<void(bool)> callback = {});
	Value<BGSProjectile> GetProjectile(Value<TESAmmo> self, std::function<void(Value<BGSProjectile>)> callback = {});
	float GetDamage(Value<TESAmmo> self, std::function<void(float)> callback = {});
	SInt32 GetQuality(Value<BGSApparatus> self, std::function<void(SInt32)> callback = {});
	void SetQuality(Value<BGSApparatus> self, SInt32 quality, std::function<void(void)> callback = {});
	SInt32 GetArmorRating(Value<TESObjectARMO> self, std::function<void(SInt32)> callback = {});
	SInt32 GetAR(Value<TESObjectARMO> self, std::function<void(SInt32)> callback = {});
	void SetArmorRating(Value<TESObjectARMO> self, SInt32 armorRating, std::function<void(void)> callback = {});
	void SetAR(Value<TESObjectARMO> self, SInt32 armorRating, std::function<void(void)> callback = {});
	void ModArmorRating(Value<TESObjectARMO> self, SInt32 modBy, std::function<void(void)> callback = {});
	void ModAR(Value<TESObjectARMO> self, SInt32 modBy, std::function<void(void)> callback = {});
	std::string GetModelPath(Value<TESObjectARMO> self, bool bFemalePath, std::function<void(std::string)> callback = {});
	void SetModelPath(Value<TESObjectARMO> self, std::string path, bool bFemalePath, std::function<void(void)> callback = {});
	std::string GetIconPath(Value<TESObjectARMO> self, bool bFemalePath, std::function<void(std::string)> callback = {});
	void SetIconPath(Value<TESObjectARMO> self, std::string path, bool bFemalePath, std::function<void(void)> callback = {});
	std::string GetMessageIconPath(Value<TESObjectARMO> self, bool bFemalePath, std::function<void(std::string)> callback = {});
	void SetMessageIconPath(Value<TESObjectARMO> self, std::string path, bool bFemalePath, std::function<void(void)> callback = {});
	SInt32 GetWeightClass(Value<TESObjectARMO> self, std::function<void(SInt32)> callback = {});
	void SetWeightClass(Value<TESObjectARMO> self, SInt32 weightClass, std::function<void(void)> callback = {});
	Value<EnchantmentItem> GetEnchantment(Value<TESObjectARMO> self, std::function<void(Value<EnchantmentItem>)> callback = {});
	void SetEnchantment(Value<TESObjectARMO> self, Value<EnchantmentItem> e, std::function<void(void)> callback = {});
	bool IsLightArmor(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsHeavyArmor(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsClothing(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsBoots(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsCuirass(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsGauntlets(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsHelmet(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsShield(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsJewelry(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsClothingHead(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsClothingBody(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsClothingFeet(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsClothingHands(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsClothingRing(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsClothingRich(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	bool IsClothingPoor(Value<TESObjectARMO> self, std::function<void(bool)> callback = {});
	SInt32 GetSlotMask(Value<TESObjectARMO> self, std::function<void(SInt32)> callback = {});
	void SetSlotMask(Value<TESObjectARMO> self, SInt32 slotMask, std::function<void(void)> callback = {});
	SInt32 AddSlotToMask(Value<TESObjectARMO> self, SInt32 slotMask, std::function<void(SInt32)> callback = {});
	SInt32 RemoveSlotFromMask(Value<TESObjectARMO> self, SInt32 slotMask, std::function<void(SInt32)> callback = {});
	SInt32 GetMaskForSlot(SInt32 slot, std::function<void(SInt32)> callback = {});
	SInt32 GetNumArmorAddons(Value<TESObjectARMO> self, std::function<void(SInt32)> callback = {});
	Value<TESObjectARMA> GetNthArmorAddon(Value<TESObjectARMO> self, SInt32 n, std::function<void(Value<TESObjectARMA>)> callback = {});
	std::string GetModelPath(Value<TESObjectARMA> self, bool firstPerson, bool female, std::function<void(std::string)> callback = {});
	void SetModelPath(Value<TESObjectARMA> self, std::string path, bool firstPerson, bool female, std::function<void(void)> callback = {});
	SInt32 GetModelNumTextureSets(Value<TESObjectARMA> self, bool first, bool female, std::function<void(SInt32)> callback = {});
	Value<BGSTextureSet> GetModelNthTextureSet(Value<TESObjectARMA> self, SInt32 n, bool first, bool female, std::function<void(Value<BGSTextureSet>)> callback = {});
	void SetModelNthTextureSet(Value<TESObjectARMA> self, Value<BGSTextureSet> texture, SInt32 n, bool first, bool female, std::function<void(void)> callback = {});
	SInt32 GetNumAdditionalRaces(Value<TESObjectARMA> self, std::function<void(SInt32)> callback = {});
	Value<TESRace> GetNthAdditionalRace(Value<TESObjectARMA> self, SInt32 n, std::function<void(Value<TESRace>)> callback = {});
	SInt32 GetSlotMask(Value<TESObjectARMA> self, std::function<void(SInt32)> callback = {});
	void SetSlotMask(Value<TESObjectARMA> self, SInt32 slotMask, std::function<void(void)> callback = {});
	SInt32 AddSlotToMask(Value<TESObjectARMA> self, SInt32 slotMask, std::function<void(SInt32)> callback = {});
	SInt32 RemoveSlotFromMask(Value<TESObjectARMA> self, SInt32 slotMask, std::function<void(SInt32)> callback = {});
	//SInt32 GetMaskForSlot(SInt32 slot, std::function<void(SInt32)> callback = {});
	std::string GetModelPath(Value<BGSArtObject> self, std::function<void(std::string)> callback = {});
	void SetModelPath(Value<BGSArtObject> self, std::string path, std::function<void(void)> callback = {});
	Value<SpellItem> GetSpell(Value<TESObjectBOOK> self, std::function<void(Value<SpellItem>)> callback = {});
	SInt32 GetSkill(Value<TESObjectBOOK> self, std::function<void(SInt32)> callback = {});
	bool IsRead(Value<TESObjectBOOK> self, std::function<void(bool)> callback = {});
	bool IsTakeable(Value<TESObjectBOOK> self, std::function<void(bool)> callback = {});
	Value<TESNPC> GetActorOwner(Value<TESObjectCELL> self, std::function<void(Value<TESNPC>)> callback = {});
	Value<TESFaction> GetFactionOwner(Value<TESObjectCELL> self, std::function<void(Value<TESFaction>)> callback = {});
	bool IsAttached(Value<TESObjectCELL> self, std::function<void(bool)> callback = {});
	bool IsInterior(Value<TESObjectCELL> self, std::function<void(bool)> callback = {});
	void Reset(Value<TESObjectCELL> self, std::function<void(void)> callback = {});
	void SetActorOwner(Value<TESObjectCELL> self, Value<TESNPC> akActor, std::function<void(void)> callback = {});
	void SetFactionOwner(Value<TESObjectCELL> self, Value<TESFaction> akFaction, std::function<void(void)> callback = {});
	void SetFogColor(Value<TESObjectCELL> self, SInt32 aiNearRed, SInt32 aiNearGreen, SInt32 aiNearBlue, SInt32 aiFarRed, SInt32 aiFarGreen, SInt32 aiFarBlue, std::function<void(void)> callback = {});
	void SetFogPlanes(Value<TESObjectCELL> self, float afNear, float afFar, std::function<void(void)> callback = {});
	void SetFogPower(Value<TESObjectCELL> self, float afPower, std::function<void(void)> callback = {});
	void SetPublic(Value<TESObjectCELL> self, bool abPublic, std::function<void(void)> callback = {});
	SInt32 GetNumRefs(Value<TESObjectCELL> self, SInt32 formTypeFilter, std::function<void(SInt32)> callback = {});
	Value<TESObjectREFR> GetNthRef(Value<TESObjectCELL> self, SInt32 n, SInt32 formTypeFilter, std::function<void(Value<TESObjectREFR>)> callback = {});
	float GetWaterLevel(Value<TESObjectCELL> self, std::function<void(float)> callback = {});
	SInt32 GetColor(Value<BGSColorForm> self, std::function<void(SInt32)> callback = {});
	void SetColor(Value<BGSColorForm> self, SInt32 color, std::function<void(void)> callback = {});
	SInt32 GetRed(Value<BGSColorForm> self, std::function<void(SInt32)> callback = {});
	SInt32 GetGreen(Value<BGSColorForm> self, std::function<void(SInt32)> callback = {});
	SInt32 GetBlue(Value<BGSColorForm> self, std::function<void(SInt32)> callback = {});
	float GetHue(Value<BGSColorForm> self, std::function<void(float)> callback = {});
	float GetSaturation(Value<BGSColorForm> self, std::function<void(float)> callback = {});
	float GetValue(Value<BGSColorForm> self, std::function<void(float)> callback = {});
	float GetOffensiveMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetDefensiveMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetGroupOffensiveMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetAvoidThreatChance(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMeleeMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetRangedMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMagicMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetShoutMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetStaffMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetUnarmedMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	void SetOffensiveMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetDefensiveMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetGroupOffensiveMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetAvoidThreatChance(Value<TESCombatStyle> self, float chance, std::function<void(void)> callback = {});
	void SetMeleeMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetRangedMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetMagicMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetShoutMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetStaffMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetUnarmedMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	float GetMeleeAttackStaggeredMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMeleePowerAttackStaggeredMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMeleePowerAttackBlockingMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMeleeBashMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMeleeBashRecoiledMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMeleeBashAttackMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMeleeBashPowerAttackMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetMeleeSpecialAttackMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	bool GetAllowDualWielding(Value<TESCombatStyle> self, std::function<void(bool)> callback = {});
	void SetMeleeAttackStaggeredMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetMeleePowerAttackStaggeredMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetMeleePowerAttackBlockingMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetMeleeBashMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetMeleeBashRecoiledMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetMeleeBashAttackMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetMeleeBashPowerAttackMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetMeleeSpecialAttackMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetAllowDualWielding(Value<TESCombatStyle> self, bool allow, std::function<void(void)> callback = {});
	float GetCloseRangeDuelingCircleMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetCloseRangeDuelingFallbackMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetCloseRangeFlankingFlankDistance(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetCloseRangeFlankingStalkTime(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	void SetCloseRangeDuelingCircleMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetCloseRangeDuelingFallbackMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetCloseRangeFlankingFlankDistance(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	void SetCloseRangeFlankingStalkTime(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	float GetLongRangeStrafeMult(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	void SetLongRangeStrafeMult(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	float GetFlightHoverChance(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetFlightDiveBombChance(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	float GetFlightFlyingAttackChance(Value<TESCombatStyle> self, std::function<void(float)> callback = {});
	void SetFlightHoverChance(Value<TESCombatStyle> self, float chance, std::function<void(void)> callback = {});
	void SetFlightDiveBombChance(Value<TESCombatStyle> self, float chance, std::function<void(void)> callback = {});
	void SetFlightFlyingAttackChance(Value<TESCombatStyle> self, float mult, std::function<void(void)> callback = {});
	Value<TESForm> GetResult(Value<BGSConstructibleObject> self, std::function<void(Value<TESForm>)> callback = {});
	void SetResult(Value<BGSConstructibleObject> self, Value<TESForm> result, std::function<void(void)> callback = {});
	SInt32 GetResultQuantity(Value<BGSConstructibleObject> self, std::function<void(SInt32)> callback = {});
	void SetResultQuantity(Value<BGSConstructibleObject> self, SInt32 quantity, std::function<void(void)> callback = {});
	SInt32 GetNumIngredients(Value<BGSConstructibleObject> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetNthIngredient(Value<BGSConstructibleObject> self, SInt32 n, std::function<void(Value<TESForm>)> callback = {});
	void SetNthIngredient(Value<BGSConstructibleObject> self, Value<TESForm> required, SInt32 n, std::function<void(void)> callback = {});
	SInt32 GetNthIngredientQuantity(Value<BGSConstructibleObject> self, SInt32 n, std::function<void(SInt32)> callback = {});
	void SetNthIngredientQuantity(Value<BGSConstructibleObject> self, SInt32 value, SInt32 n, std::function<void(void)> callback = {});
	Value<BGSKeyword> GetWorkbenchKeyword(Value<BGSConstructibleObject> self, std::function<void(Value<BGSKeyword>)> callback = {});
	void SetWorkbenchKeyword(Value<BGSConstructibleObject> self, Value<BGSKeyword> aKeyword, std::function<void(void)> callback = {});
	std::string GetPlatformName(std::function<void(std::string)> callback = {});
	std::string GetVersionNumber(std::function<void(std::string)> callback = {});
	//void MessageBox(xt, std::function<void(void)> callback = {});
	//void Notification(xt, std::function<void(void)> callback = {});
	void QuitGame(std::function<void(void)> callback = {});
	void SetFootIK(bool abFootIK, std::function<void(void)> callback = {});
	void SetGodMode(bool abGodMode, std::function<void(void)> callback = {});
	void SendAnimationEvent(Value<TESObjectREFR> arRef, std::string asEventName, std::function<void(void)> callback = {});
	void TakeScreenshot(std::string asFilename, std::function<void(void)> callback = {});
	void ToggleAI(std::function<void(void)> callback = {});
	void ToggleCollisions(std::function<void(void)> callback = {});
	void ToggleMenus(std::function<void(void)> callback = {});
	void Play(Value<TESEffectShader> self, Value<TESObjectREFR> akObject, float afDuration, std::function<void(void)> callback = {});
	void Stop(Value<TESEffectShader> self, Value<TESObjectREFR> akObject, std::function<void(void)> callback = {});
	bool IsHostile(Value<EnchantmentItem> self, std::function<void(bool)> callback = {});
	SInt32 GetNumEffects(Value<EnchantmentItem> self, std::function<void(SInt32)> callback = {});
	float GetNthEffectMagnitude(Value<EnchantmentItem> self, SInt32 index, std::function<void(float)> callback = {});
	SInt32 GetNthEffectArea(Value<EnchantmentItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	SInt32 GetNthEffectDuration(Value<EnchantmentItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	Value<EffectSetting> GetNthEffectMagicEffect(Value<EnchantmentItem> self, SInt32 index, std::function<void(Value<EffectSetting>)> callback = {});
	SInt32 GetCostliestEffectIndex(Value<EnchantmentItem> self, std::function<void(SInt32)> callback = {});
	void SetNthEffectMagnitude(Value<EnchantmentItem> self, SInt32 index, float value, std::function<void(void)> callback = {});
	void SetNthEffectArea(Value<EnchantmentItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	void SetNthEffectDuration(Value<EnchantmentItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	Value<EnchantmentItem> GetBaseEnchantment(Value<EnchantmentItem> self, std::function<void(Value<EnchantmentItem>)> callback = {});
	Value<BGSListForm> GetKeywordRestrictions(Value<EnchantmentItem> self, std::function<void(Value<BGSListForm>)> callback = {});
	void SetKeywordRestrictions(Value<EnchantmentItem> self, Value<BGSListForm> newKeywordList, std::function<void(void)> callback = {});
	SInt32 GetNumParents(Value<BGSEquipSlot> self, std::function<void(SInt32)> callback = {});
	Value<BGSEquipSlot> GetNthParent(Value<BGSEquipSlot> self, SInt32 n, std::function<void(Value<BGSEquipSlot>)> callback = {});
	bool CanPayCrimeGold(Value<TESFaction> self, std::function<void(bool)> callback = {});
	SInt32 GetCrimeGold(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	SInt32 GetCrimeGoldNonViolent(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	SInt32 GetCrimeGoldViolent(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	SInt32 GetInfamy(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	SInt32 GetInfamyNonViolent(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	SInt32 GetInfamyViolent(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	SInt32 GetReaction(Value<TESFaction> self, Value<TESFaction> akOther, std::function<void(SInt32)> callback = {});
	SInt32 GetStolenItemValueCrime(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	SInt32 GetStolenItemValueNoCrime(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	bool IsFactionInCrimeGroup(Value<TESFaction> self, Value<TESFaction> akOther, std::function<void(bool)> callback = {});
	bool IsPlayerExpelled(Value<TESFaction> self, std::function<void(bool)> callback = {});
	void ModCrimeGold(Value<TESFaction> self, SInt32 aiAmount, bool abViolent, std::function<void(void)> callback = {});
	void ModReaction(Value<TESFaction> self, Value<TESFaction> akOther, SInt32 aiAmount, std::function<void(void)> callback = {});
	void PlayerPayCrimeGold(Value<TESFaction> self, bool abRemoveStolenItems, bool abGoToJail, std::function<void(void)> callback = {});
	void SendAssaultAlarm(Value<TESFaction> self, std::function<void(void)> callback = {});
	void SendPlayerToJail(Value<TESFaction> self, bool abRemoveInventory, bool abRealJail, std::function<void(void)> callback = {});
	void SetAlly(Value<TESFaction> self, Value<TESFaction> akOther, bool abSelfIsFriendToOther, bool abOtherIsFriendToSelf, std::function<void(void)> callback = {});
	void SetCrimeGold(Value<TESFaction> self, SInt32 aiGold, std::function<void(void)> callback = {});
	void SetCrimeGoldViolent(Value<TESFaction> self, SInt32 aiGold, std::function<void(void)> callback = {});
	void SetEnemy(Value<TESFaction> self, Value<TESFaction> akOther, bool abSelfIsNeutralToOther, bool abOtherIsNeutralToSelf, std::function<void(void)> callback = {});
	void SetPlayerEnemy(Value<TESFaction> self, bool abIsEnemy, std::function<void(void)> callback = {});
	void SetPlayerExpelled(Value<TESFaction> self, bool abIsExpelled, std::function<void(void)> callback = {});
	void SetReaction(Value<TESFaction> self, Value<TESFaction> akOther, SInt32 aiNewValue, std::function<void(void)> callback = {});
	void MakeVendor(Value<TESFaction> self, std::function<void(void)> callback = {});
	bool IsVendor(Value<TESFaction> self, std::function<void(bool)> callback = {});
	void ClearVendor(Value<TESFaction> self, std::function<void(void)> callback = {});
	bool IsFactionFlagSet(Value<TESFaction> self, SInt32 flag, std::function<void(bool)> callback = {});
	void SetFactionFlag(Value<TESFaction> self, SInt32 flag, std::function<void(void)> callback = {});
	void ClearFactionFlag(Value<TESFaction> self, SInt32 flag, std::function<void(void)> callback = {});
	bool OnlyBuysStolenItems(Value<TESFaction> self, std::function<void(bool)> callback = {});
	void SetOnlyBuysStolenItems(Value<TESFaction> self, bool onlyStolen, std::function<void(void)> callback = {});
	SInt32 GetVendorStartHour(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	void SetVendorStartHour(Value<TESFaction> self, SInt32 hour, std::function<void(void)> callback = {});
	SInt32 GetVendorEndHour(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	void SetVendorEndHour(Value<TESFaction> self, SInt32 hour, std::function<void(void)> callback = {});
	SInt32 GetVendorRadius(Value<TESFaction> self, std::function<void(SInt32)> callback = {});
	void SetVendorRadius(Value<TESFaction> self, SInt32 radius, std::function<void(void)> callback = {});
	Value<TESObjectREFR> GetMerchantContainer(Value<TESFaction> self, std::function<void(Value<TESObjectREFR>)> callback = {});
	void SetMerchantContainer(Value<TESFaction> self, Value<TESObjectREFR> akContainer, std::function<void(void)> callback = {});
	bool IsNotSellBuy(Value<TESFaction> self, std::function<void(bool)> callback = {});
	void SetNotSellBuy(Value<TESFaction> self, bool notSellBuy, std::function<void(void)> callback = {});
	Value<BGSListForm> GetBuySellList(Value<TESFaction> self, std::function<void(Value<BGSListForm>)> callback = {});
	void SetBuySellList(Value<TESFaction> self, Value<BGSListForm> akList, std::function<void(void)> callback = {});
	Value<BGSSoundDescriptorForm> GetHarvestSound(Value<TESFlora> self, std::function<void(Value<BGSSoundDescriptorForm>)> callback = {});
	void SetHarvestSound(Value<TESFlora> self, Value<BGSSoundDescriptorForm> akSoundDescriptor, std::function<void(void)> callback = {});
	Value<TESForm> GetIngredient(Value<TESFlora> self, std::function<void(Value<TESForm>)> callback = {});
	void SetIngredient(Value<TESFlora> self, Value<TESForm> akIngredient, std::function<void(void)> callback = {});
	SInt32 GetGoldValue(Value<TESForm> self, std::function<void(SInt32)> callback = {});
	bool HasKeyword(Value<TESForm> self, Value<BGSKeyword> akKeyword, std::function<void(bool)> callback = {});
	bool PlayerKnows(Value<TESForm> self, std::function<void(bool)> callback = {});
	bool RegisterForAnimationEvent(Value<TESForm> self, Value<TESObjectREFR> akSender, std::string asEventName, std::function<void(bool)> callback = {});
	void RegisterForLOS(Value<TESForm> self, Value<Actor> akViewer, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	void RegisterForSingleLOSGain(Value<TESForm> self, Value<Actor> akViewer, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	void RegisterForSingleLOSLost(Value<TESForm> self, Value<Actor> akViewer, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	void RegisterForSingleUpdate(Value<TESForm> self, float afInterval, std::function<void(void)> callback = {});
	void RegisterForSleep(Value<TESForm> self, std::function<void(void)> callback = {});
	void RegisterForTrackedStatsEvent(Value<TESForm> self, std::function<void(void)> callback = {});
	void RegisterForUpdate(Value<TESForm> self, float afInterval, std::function<void(void)> callback = {});
	void RegisterForUpdateGameTime(Value<TESForm> self, float afInterval, std::function<void(void)> callback = {});
	void RegisterForSingleUpdateGameTime(Value<TESForm> self, float afInterval, std::function<void(void)> callback = {});
	void StartObjectProfiling(Value<TESForm> self, std::function<void(void)> callback = {});
	void StopObjectProfiling(Value<TESForm> self, std::function<void(void)> callback = {});
	void UnregisterForAnimationEvent(Value<TESForm> self, Value<TESObjectREFR> akSender, std::string asEventName, std::function<void(void)> callback = {});
	void UnregisterForLOS(Value<TESForm> self, Value<Actor> akViewer, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	void UnregisterForSleep(Value<TESForm> self, std::function<void(void)> callback = {});
	void UnregisterForTrackedStatsEvent(Value<TESForm> self, std::function<void(void)> callback = {});
	void UnregisterForUpdate(Value<TESForm> self, std::function<void(void)> callback = {});
	void UnregisterForUpdateGameTime(Value<TESForm> self, std::function<void(void)> callback = {});
	SInt32 GetType(Value<TESForm> self, std::function<void(SInt32)> callback = {});
	std::string GetName(Value<TESForm> self, std::function<void(std::string)> callback = {});
	void SetName(Value<TESForm> self, std::string name, std::function<void(void)> callback = {});
	float GetWeight(Value<TESForm> self, std::function<void(float)> callback = {});
	void SetWeight(Value<TESForm> self, float weight, std::function<void(void)> callback = {});
	void SetGoldValue(Value<TESForm> self, SInt32 value, std::function<void(void)> callback = {});
	SInt32 GetNumKeywords(Value<TESForm> self, std::function<void(SInt32)> callback = {});
	Value<BGSKeyword> GetNthKeyword(Value<TESForm> self, SInt32 index, std::function<void(Value<BGSKeyword>)> callback = {});
	bool HasKeywordString(Value<TESForm> self, std::string s, std::function<void(bool)> callback = {});
	void SetPlayerKnows(Value<TESForm> self, bool knows, std::function<void(void)> callback = {});
	void RegisterForKey(Value<TESForm> self, SInt32 keyCode, std::function<void(void)> callback = {});
	void UnregisterForKey(Value<TESForm> self, SInt32 keyCode, std::function<void(void)> callback = {});
	void UnregisterForAllKeys(Value<TESForm> self, std::function<void(void)> callback = {});
	void RegisterForControl(Value<TESForm> self, std::string control, std::function<void(void)> callback = {});
	void UnregisterForControl(Value<TESForm> self, std::string control, std::function<void(void)> callback = {});
	void UnregisterForAllControls(Value<TESForm> self, std::function<void(void)> callback = {});
	void RegisterForMenu(Value<TESForm> self, std::string menuName, std::function<void(void)> callback = {});
	void UnregisterForMenu(Value<TESForm> self, std::string menuName, std::function<void(void)> callback = {});
	void UnregisterForAllMenus(Value<TESForm> self, std::function<void(void)> callback = {});
	void RegisterForModEvent(Value<TESForm> self, std::string eventName, std::string callbackName, std::function<void(void)> callback = {});
	void UnregisterForModEvent(Value<TESForm> self, std::string eventName, std::function<void(void)> callback = {});
	void UnregisterForAllModEvents(Value<TESForm> self, std::function<void(void)> callback = {});
	void SendModEvent(Value<TESForm> self, std::string eventName, std::string strArg, float numArg, std::function<void(void)> callback = {});
	void RegisterForCameraState(Value<TESForm> self, std::function<void(void)> callback = {});
	void UnregisterForCameraState(Value<TESForm> self, std::function<void(void)> callback = {});
	void RegisterForCrosshairRef(Value<TESForm> self, std::function<void(void)> callback = {});
	void UnregisterForCrosshairRef(Value<TESForm> self, std::function<void(void)> callback = {});
	void RegisterForActorAction(Value<TESForm> self, SInt32 actionType, std::function<void(void)> callback = {});
	void UnregisterForActorAction(Value<TESForm> self, SInt32 actionType, std::function<void(void)> callback = {});
	void RegisterForNiNodeUpdate(Value<TESForm> self, std::function<void(void)> callback = {});
	void UnregisterForNiNodeUpdate(Value<TESForm> self, std::function<void(void)> callback = {});
	Value<TESForm> TempClone(Value<TESForm> self, std::function<void(Value<TESForm>)> callback = {});
	bool HasWorldModel(Value<TESForm> self, std::function<void(bool)> callback = {});
	std::string GetWorldModelPath(Value<TESForm> self, std::function<void(std::string)> callback = {});
	void SetWorldModelPath(Value<TESForm> self, std::string path, std::function<void(void)> callback = {});
	SInt32 GetWorldModelNumTextureSets(Value<TESForm> self, std::function<void(SInt32)> callback = {});
	Value<BGSTextureSet> GetWorldModelNthTextureSet(Value<TESForm> self, SInt32 n, std::function<void(Value<BGSTextureSet>)> callback = {});
	void SetWorldModelNthTextureSet(Value<TESForm> self, Value<BGSTextureSet> nSet, SInt32 n, std::function<void(void)> callback = {});
	bool IsPlayable(Value<TESForm> self, std::function<void(bool)> callback = {});
	void AddForm(Value<BGSListForm> self, Value<TESForm> apForm, std::function<void(void)> callback = {});
	SInt32 Find(Value<BGSListForm> self, Value<TESForm> apForm, std::function<void(SInt32)> callback = {});
	SInt32 GetSize(Value<BGSListForm> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetAt(Value<BGSListForm> self, SInt32 aiIndex, std::function<void(Value<TESForm>)> callback = {});
	bool HasForm(Value<BGSListForm> self, Value<TESForm> akForm, std::function<void(bool)> callback = {});
	void RemoveAddedForm(Value<BGSListForm> self, Value<TESForm> apForm, std::function<void(void)> callback = {});
	void Revert(Value<BGSListForm> self, std::function<void(void)> callback = {});
	void AddAchievement(SInt32 aiAchievementID, std::function<void(void)> callback = {});
	void AddPerkPoints(SInt32 aiPerkPoints, std::function<void(void)> callback = {});
	void AdvanceSkill(std::string asSkillName, float afMagnitude, std::function<void(void)> callback = {});
	bool AddHavokBallAndSocketConstraint(Value<TESObjectREFR> arRefA, std::string arRefANode, Value<TESObjectREFR> arRefB, std::string arRefBNode, float afRefALocalOffsetX, float afRefALocalOffsetY, float afRefALocalOffsetZ, float afRefBLocalOffsetX, float afRefBLocalOffsetY, float afRefBLocalOffsetZ, std::function<void(bool)> callback = {});
	bool RemoveHavokConstraints(Value<TESObjectREFR> arFirstRef, std::string arFirstRefNodeName, Value<TESObjectREFR> arSecondRef, std::string arSecondRefNodeName, std::function<void(bool)> callback = {});
	SInt32 CalculateFavorCost(SInt32 aiFavorPrice, std::function<void(SInt32)> callback = {});
	void ClearPrison(std::function<void(void)> callback = {});
	void ClearTempEffects(std::function<void(void)> callback = {});
	void DisablePlayerControls(bool abMovement, bool abFighting, bool abCamSwitch, bool abLooking, bool abSneaking, bool abMenu, bool abActivate, bool abJournalTabs, SInt32 aiDisablePOVType, std::function<void(void)> callback = {});
	void EnablePlayerControls(bool abMovement, bool abFighting, bool abCamSwitch, bool abLooking, bool abSneaking, bool abMenu, bool abActivate, bool abJournalTabs, SInt32 aiDisablePOVType, std::function<void(void)> callback = {});
	void EnableFastTravel(bool abEnable, std::function<void(void)> callback = {});
	void FadeOutGame(bool abFadingOut, bool abBlackFade, float afSecsBeforeFade, float afFadeDuration, std::function<void(void)> callback = {});
	void FastTravel(Value<TESObjectREFR> akDestination, std::function<void(void)> callback = {});
	Value<TESObjectREFR> FindClosestReferenceOfType(Value<TESForm> arBaseObject, float afX, float afY, float afZ, float afRadius, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<TESObjectREFR> FindRandomReferenceOfType(Value<TESForm> arBaseObject, float afX, float afY, float afZ, float afRadius, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<TESObjectREFR> FindClosestReferenceOfAnyTypeInList(Value<BGSListForm> arBaseObjects, float afX, float afY, float afZ, float afRadius, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<TESObjectREFR> FindRandomReferenceOfAnyTypeInList(Value<BGSListForm> arBaseObjects, float afX, float afY, float afZ, float afRadius, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<TESObjectREFR> FindClosestReferenceOfTypeFromRef(Value<TESForm> arBaseObject, Value<TESObjectREFR> arCenter, float afRadius, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<TESObjectREFR> FindRandomReferenceOfTypeFromRef(Value<TESForm> arBaseObject, Value<TESObjectREFR> arCenter, float afRadius, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<TESObjectREFR> FindClosestReferenceOfAnyTypeInListFromRef(Value<BGSListForm> arBaseObjects, Value<TESObjectREFR> arCenter, float afRadius, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<TESObjectREFR> FindRandomReferenceOfAnyTypeInListFromRef(Value<BGSListForm> arBaseObjects, Value<TESObjectREFR> arCenter, float afRadius, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<Actor> FindClosestActor(float afX, float afY, float afZ, float afRadius, std::function<void(Value<Actor>)> callback = {});
	Value<Actor> FindClosestActor(NiPoint3 pos, float afRadius, std::function<void(Value<Actor>)> callback = {});
	Value<Actor> FindRandomActor(float afX, float afY, float afZ, float afRadius, std::function<void(Value<Actor>)> callback = {});
	Value<Actor> FindRandomActor(NiPoint3 pos, float afRadius, std::function<void(Value<Actor>)> callback = {});
	Value<Actor> FindClosestActorFromRef(Value<TESObjectREFR> arCenter, float afRadius, std::function<void(Value<Actor>)> callback = {});
	Value<Actor> FindRandomActorFromRef(Value<TESObjectREFR> arCenter, float afRadius, std::function<void(Value<Actor>)> callback = {});
	void ForceThirdPerson(std::function<void(void)> callback = {});
	void ForceFirstPerson(std::function<void(void)> callback = {});
	void ShowFirstPersonGeometry(bool abShow, std::function<void(void)> callback = {});
	//Value<TESForm> GetFormFromFile(UInt32 aiFormID, std::string asFilename, std::function<void(Value<TESForm>)> callback = {});
	float GetGameSettingFloat(std::string asGameSetting, std::function<void(float)> callback = {});
	SInt32 GetGameSettingInt(std::string asGameSetting, std::function<void(SInt32)> callback = {});
	std::string GetGameSettingString(std::string asGameSetting, std::function<void(std::string)> callback = {});
	Value<TESObjectREFR> GetPlayerGrabbedRef(std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<Actor> GetPlayersLastRiddenHorse(std::function<void(Value<Actor>)> callback = {});
	float GetSunPositionX(std::function<void(float)> callback = {});
	float GetSunPositionY(std::function<void(float)> callback = {});
	float GetSunPositionZ(std::function<void(float)> callback = {});
	float GetRealHoursPassed(std::function<void(float)> callback = {});
	void IncrementSkill(std::string asSkillName, std::function<void(void)> callback = {});
	void IncrementSkillBy(std::string asSkillName, SInt32 aiCount, std::function<void(void)> callback = {});
	void IncrementStat(std::string asStatName, SInt32 aiModAmount, std::function<void(void)> callback = {});
	bool IsActivateControlsEnabled(std::function<void(bool)> callback = {});
	bool IsCamSwitchControlsEnabled(std::function<void(bool)> callback = {});
	bool IsFastTravelControlsEnabled(std::function<void(bool)> callback = {});
	bool IsFastTravelEnabled(std::function<void(bool)> callback = {});
	bool IsFightingControlsEnabled(std::function<void(bool)> callback = {});
	bool IsJournalControlsEnabled(std::function<void(bool)> callback = {});
	bool IsLookingControlsEnabled(std::function<void(bool)> callback = {});
	bool IsMenuControlsEnabled(std::function<void(bool)> callback = {});
	bool IsMovementControlsEnabled(std::function<void(bool)> callback = {});
	bool IsPlayerSungazing(std::function<void(bool)> callback = {});
	bool IsSneakingControlsEnabled(std::function<void(bool)> callback = {});
	bool IsWordUnlocked(Value<TESWordOfPower> akWord, std::function<void(bool)> callback = {});
	void PlayBink(std::string asFileName, bool abInterruptible, bool abMuteAudio, bool abMuteMusic, bool abLetterbox, std::function<void(void)> callback = {});
	void PrecacheCharGen(std::function<void(void)> callback = {});
	void PrecacheCharGenClear(std::function<void(void)> callback = {});
	SInt32 QueryStat(std::string asStat, std::function<void(SInt32)> callback = {});
	void QuitToMainMenu(std::function<void(void)> callback = {});
	void RequestAutoSave(std::function<void(void)> callback = {});
	void RequestModel(std::string asModelName, std::function<void(void)> callback = {});
	void RequestSave(std::function<void(void)> callback = {});
	void ServeTime(std::function<void(void)> callback = {});
	void SendWereWolfTransformation(std::function<void(void)> callback = {});
	void SetBeastForm(bool abEntering, std::function<void(void)> callback = {});
	void SetCameraTarget(Value<Actor> arTarget, std::function<void(void)> callback = {});
	void SetHudCartMode(bool abSetCartMode, std::function<void(void)> callback = {});
	void SetInChargen(bool abDisableSaving, bool abDisableWaiting, bool abShowControlsDisabledMessage, std::function<void(void)> callback = {});
	void SetPlayerAIDriven(bool abAIDriven, std::function<void(void)> callback = {});
	void SetPlayerReportCrime(bool abReportCrime, std::function<void(void)> callback = {});
	void SetSittingRotation(float afValue, std::function<void(void)> callback = {});
	void ShakeCamera(Value<TESObjectREFR> akSource, float afStrength, float afDuration, std::function<void(void)> callback = {});
	void ShakeController(float afSmallMotorStrength, float afBigMotorStreangth, float afDuration, std::function<void(void)> callback = {});
	void ShowRaceMenu(std::function<void(void)> callback = {});
	void ShowLimitedRaceMenu(std::function<void(void)> callback = {});
	void ShowTitleSequenceMenu(std::function<void(void)> callback = {});
	void HideTitleSequenceMenu(std::function<void(void)> callback = {});
	void StartTitleSequence(std::string asSequenceName, std::function<void(void)> callback = {});
	void SetAllowFlyingMountLandingRequests(bool abAllow, std::function<void(void)> callback = {});
	void SetSunGazeImageSpaceModifier(Value<TESImageSpaceModifier> apImod, std::function<void(void)> callback = {});
	void ShowTrainingMenu(Value<Actor> aTrainer, std::function<void(void)> callback = {});
	void TeachWord(Value<TESWordOfPower> akWord, std::function<void(void)> callback = {});
	void TriggerScreenBlood(SInt32 aiValue, std::function<void(void)> callback = {});
	void UnlockWord(Value<TESWordOfPower> akWord, std::function<void(void)> callback = {});
	bool UsingGamepad(std::function<void(bool)> callback = {});
	SInt32 GetPerkPoints(std::function<void(SInt32)> callback = {});
	void SetPerkPoints(SInt32 perkPoints, std::function<void(void)> callback = {});
	void ModPerkPoints(SInt32 perkPoints, std::function<void(void)> callback = {});
	SInt32 GetModCount(std::function<void(SInt32)> callback = {});
	SInt32 GetModByName(std::string name, std::function<void(SInt32)> callback = {});
	std::string GetModName(SInt32 modIndex, std::function<void(std::string)> callback = {});
	std::string GetModAuthor(SInt32 modIndex, std::function<void(std::string)> callback = {});
	std::string GetModDescription(SInt32 modIndex, std::function<void(std::string)> callback = {});
	SInt32 GetModDependencyCount(SInt32 modIndex, std::function<void(SInt32)> callback = {});
	SInt32 GetNthModDependency(SInt32 modIndex, SInt32 n, std::function<void(SInt32)> callback = {});
	void SetGameSettingFloat(std::string setting, float value, std::function<void(void)> callback = {});
	void SetGameSettingInt(std::string setting, SInt32 value, std::function<void(void)> callback = {});
	void SetGameSettingBool(std::string setting, bool value, std::function<void(void)> callback = {});
	void SetGameSettingString(std::string setting, std::string value, std::function<void(void)> callback = {});
	void SaveGame(std::string name, std::function<void(void)> callback = {});
	void LoadGame(std::string name, std::function<void(void)> callback = {});
	SInt32 GetNumTintMasks(std::function<void(SInt32)> callback = {});
	SInt32 GetNthTintMaskColor(SInt32 n, std::function<void(SInt32)> callback = {});
	SInt32 GetNthTintMaskType(SInt32 n, std::function<void(SInt32)> callback = {});
	void SetNthTintMaskColor(SInt32 n, SInt32 color, std::function<void(void)> callback = {});
	std::string GetNthTintMaskTexturePath(SInt32 n, std::function<void(std::string)> callback = {});
	void SetNthTintMaskTexturePath(std::string path, SInt32 n, std::function<void(void)> callback = {});
	SInt32 GetNumTintsByType(SInt32 type, std::function<void(SInt32)> callback = {});
	SInt32 GetTintMaskColor(SInt32 type, SInt32 index, std::function<void(SInt32)> callback = {});
	void SetTintMaskColor(SInt32 color, SInt32 type, SInt32 index, std::function<void(void)> callback = {});
	std::string GetTintMaskTexturePath(SInt32 type, SInt32 index, std::function<void(std::string)> callback = {});
	void SetTintMaskTexturePath(std::string path, SInt32 type, SInt32 index, std::function<void(void)> callback = {});
	void UpdateTintMaskColors(std::function<void(void)> callback = {});
	void UpdateHairColor(std::function<void(void)> callback = {});
	SInt32 GetCameraState(std::function<void(SInt32)> callback = {});
	void SetMiscStat(std::string name, SInt32 value, std::function<void(void)> callback = {});
	void SetPlayersLastRiddenHorse(Value<Actor> horse, std::function<void(void)> callback = {});
	SInt32 GetSkillLegendaryLevel(std::string actorValue, std::function<void(SInt32)> callback = {});
	void SetSkillLegendaryLevel(std::string actorValue, SInt32 level, std::function<void(void)> callback = {});
	float GetPlayerExperience(std::function<void(float)> callback = {});
	void SetPlayerExperience(float exp, std::function<void(void)> callback = {});
	float GetExperienceForLevel(SInt32 currentLevel, std::function<void(float)> callback = {});
	bool GetPlayerMovementMode(std::function<void(bool)> callback = {});
	void UpdateThirdPerson(std::function<void(void)> callback = {});
	void UnbindObjectHotkey(SInt32 hotkey, std::function<void(void)> callback = {});
	Value<TESForm> GetHotkeyBoundObject(SInt32 hotkey, std::function<void(Value<TESForm>)> callback = {});
	bool IsObjectFavorited(Value<TESForm> form, std::function<void(bool)> callback = {});
	//Value<TESForm> GetFormEx(SInt32 formId, std::function<void(Value<TESForm>)> callback = {});
	Value<TESObjectREFR> GetDialogueTarget(std::function<void(Value<TESObjectREFR>)> callback = {});
	void SetPlayerLevel(SInt32 level, std::function<void(void)> callback = {});
	float GetValue(Value<TESGlobal> self, std::function<void(float)> callback = {});
	void SetValue(Value<TESGlobal> self, float afNewValue, std::function<void(void)> callback = {});
	SInt32 GetValueInt(Value<TESGlobal> self, std::function<void(SInt32)> callback = {});
	void SetValueInt(Value<TESGlobal> self, SInt32 aiNewValue, std::function<void(void)> callback = {});
	float Mod(Value<TESGlobal> self, float afHowMuch, std::function<void(float)> callback = {});
	Value<BGSHeadPart> GetHeadPart(std::string name, std::function<void(Value<BGSHeadPart>)> callback = {});
	SInt32 GetType(Value<BGSHeadPart> self, std::function<void(SInt32)> callback = {});
	SInt32 GetNumExtraParts(Value<BGSHeadPart> self, std::function<void(SInt32)> callback = {});
	Value<BGSHeadPart> GetNthExtraPart(Value<BGSHeadPart> self, SInt32 n, std::function<void(Value<BGSHeadPart>)> callback = {});
	bool HasExtraPart(Value<BGSHeadPart> self, Value<BGSHeadPart> p, std::function<void(bool)> callback = {});
	SInt32 GetIndexOfExtraPart(Value<BGSHeadPart> self, Value<BGSHeadPart> p, std::function<void(SInt32)> callback = {});
	Value<BGSListForm> GetValidRaces(Value<BGSHeadPart> self, std::function<void(Value<BGSListForm>)> callback = {});
	void SetValidRaces(Value<BGSHeadPart> self, Value<BGSListForm> vRaces, std::function<void(void)> callback = {});
	bool IsExtraPart(Value<BGSHeadPart> self, std::function<void(bool)> callback = {});
	void Apply(Value<TESImageSpaceModifier> self, float afStrength, std::function<void(void)> callback = {});
	void ApplyCrossFade(Value<TESImageSpaceModifier> self, float afFadeDuration, std::function<void(void)> callback = {});
	void PopTo(Value<TESImageSpaceModifier> self, Value<TESImageSpaceModifier> akNewModifier, float afStrength, std::function<void(void)> callback = {});
	void Remove(Value<TESImageSpaceModifier> self, std::function<void(void)> callback = {});
	void RemoveCrossFade(float afFadeDuration, std::function<void(void)> callback = {});
	bool IsHostile(Value<IngredientItem> self, std::function<void(bool)> callback = {});
	void LearnEffect(Value<IngredientItem> self, SInt32 aiIndex, std::function<void(void)> callback = {});
	SInt32 LearnNextEffect(Value<IngredientItem> self, std::function<void(SInt32)> callback = {});
	void LearnAllEffects(Value<IngredientItem> self, std::function<void(void)> callback = {});
	SInt32 GetNumEffects(Value<IngredientItem> self, std::function<void(SInt32)> callback = {});
	float GetNthEffectMagnitude(Value<IngredientItem> self, SInt32 index, std::function<void(float)> callback = {});
	SInt32 GetNthEffectArea(Value<IngredientItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	SInt32 GetNthEffectDuration(Value<IngredientItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	Value<EffectSetting> GetNthEffectMagicEffect(Value<IngredientItem> self, SInt32 index, std::function<void(Value<EffectSetting>)> callback = {});
	SInt32 GetCostliestEffectIndex(Value<IngredientItem> self, std::function<void(SInt32)> callback = {});
	void SetNthEffectMagnitude(Value<IngredientItem> self, SInt32 index, float value, std::function<void(void)> callback = {});
	void SetNthEffectArea(Value<IngredientItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	void SetNthEffectDuration(Value<IngredientItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	bool GetIsNthEffectKnown(Value<IngredientItem> self, SInt32 index, std::function<void(bool)> callback = {});
	bool IsKeyPressed(SInt32 dxKeycode, std::function<void(bool)> callback = {});
	void TapKey(SInt32 dxKeycode, std::function<void(void)> callback = {});
	void HoldKey(SInt32 dxKeycode, std::function<void(void)> callback = {});
	void ReleaseKey(SInt32 dxKeycode, std::function<void(void)> callback = {});
	SInt32 GetNumKeysPressed(std::function<void(SInt32)> callback = {});
	SInt32 GetNthKeyPressed(SInt32 n, std::function<void(SInt32)> callback = {});
	SInt32 GetMappedKey(std::string control, SInt32 deviceType, std::function<void(SInt32)> callback = {});
	std::string GetMappedControl(SInt32 keycode, std::function<void(std::string)> callback = {});
	void SendStoryEvent(Value<BGSKeyword> self, Value<BGSLocation> akLoc, Value<TESObjectREFR> akRef1, Value<TESObjectREFR> akRef2, SInt32 aiValue1, SInt32 aiValue2, std::function<void(void)> callback = {});
	bool SendStoryEventAndWait(Value<BGSKeyword> self, Value<BGSLocation> akLoc, Value<TESObjectREFR> akRef1, Value<TESObjectREFR> akRef2, SInt32 aiValue1, SInt32 aiValue2, std::function<void(bool)> callback = {});
	Value<BGSKeyword> GetKeyword(std::string key, std::function<void(Value<BGSKeyword>)> callback = {});
	std::string GetString(Value<BGSKeyword> self, std::function<void(std::string)> callback = {});
	void AddForm(Value<TESLevCharacter> self, Value<TESForm> apForm, SInt32 aiLevel, std::function<void(void)> callback = {});
	void Revert(Value<TESLevCharacter> self, std::function<void(void)> callback = {});
	SInt32 GetNumForms(Value<TESLevCharacter> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetNthForm(Value<TESLevCharacter> self, SInt32 n, std::function<void(Value<TESForm>)> callback = {});
	SInt32 GetNthLevel(Value<TESLevCharacter> self, SInt32 n, std::function<void(SInt32)> callback = {});
	void SetNthLevel(Value<TESLevCharacter> self, SInt32 n, SInt32 level, std::function<void(void)> callback = {});
	SInt32 GetNthCount(Value<TESLevCharacter> self, SInt32 n, std::function<void(SInt32)> callback = {});
	void SetNthCount(Value<TESLevCharacter> self, SInt32 n, SInt32 count, std::function<void(void)> callback = {});
	void AddForm(Value<TESLevItem> self, Value<TESForm> apForm, SInt32 aiLevel, SInt32 aiCount, std::function<void(void)> callback = {});
	void Revert(Value<TESLevItem> self, std::function<void(void)> callback = {});
	SInt32 GetChanceNone(Value<TESLevItem> self, std::function<void(SInt32)> callback = {});
	void SetChanceNone(Value<TESLevItem> self, SInt32 chance, std::function<void(void)> callback = {});
	Value<TESGlobal> GetChanceGlobal(Value<TESLevItem> self, std::function<void(Value<TESGlobal>)> callback = {});
	void SetChanceGlobal(Value<TESLevItem> self, Value<TESGlobal> glob, std::function<void(void)> callback = {});
	SInt32 GetNumForms(Value<TESLevItem> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetNthForm(Value<TESLevItem> self, SInt32 n, std::function<void(Value<TESForm>)> callback = {});
	SInt32 GetNthLevel(Value<TESLevItem> self, SInt32 n, std::function<void(SInt32)> callback = {});
	void SetNthLevel(Value<TESLevItem> self, SInt32 n, SInt32 level, std::function<void(void)> callback = {});
	SInt32 GetNthCount(Value<TESLevItem> self, SInt32 n, std::function<void(SInt32)> callback = {});
	void SetNthCount(Value<TESLevItem> self, SInt32 n, SInt32 count, std::function<void(void)> callback = {});
	void AddForm(Value<TESLevSpell> self, Value<TESForm> apForm, SInt32 aiLevel, std::function<void(void)> callback = {});
	void Revert(Value<TESLevSpell> self, std::function<void(void)> callback = {});
	SInt32 GetChanceNone(Value<TESLevSpell> self, std::function<void(SInt32)> callback = {});
	void SetChanceNone(Value<TESLevSpell> self, SInt32 chance, std::function<void(void)> callback = {});
	SInt32 GetNumForms(Value<TESLevSpell> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetNthForm(Value<TESLevSpell> self, SInt32 n, std::function<void(Value<TESForm>)> callback = {});
	SInt32 GetNthLevel(Value<TESLevSpell> self, SInt32 n, std::function<void(SInt32)> callback = {});
	void SetNthLevel(Value<TESLevSpell> self, SInt32 n, SInt32 level, std::function<void(void)> callback = {});
	float GetKeywordData(Value<BGSLocation> self, Value<BGSKeyword> akKeyword, std::function<void(float)> callback = {});
	SInt32 GetRefTypeAliveCount(Value<BGSLocation> self, Value<BGSLocationRefType> akRefType, std::function<void(SInt32)> callback = {});
	SInt32 GetRefTypeDeadCount(Value<BGSLocation> self, Value<BGSLocationRefType> akRefType, std::function<void(SInt32)> callback = {});
	bool HasCommonParent(Value<BGSLocation> self, Value<BGSLocation> akOther, Value<BGSKeyword> akFilter, std::function<void(bool)> callback = {});
	bool HasRefType(Value<BGSLocation> self, Value<BGSLocationRefType> akRefType, std::function<void(bool)> callback = {});
	bool IsCleared(Value<BGSLocation> self, std::function<void(bool)> callback = {});
	bool IsChild(Value<BGSLocation> self, Value<BGSLocation> akOther, std::function<void(bool)> callback = {});
	bool IsLoaded(Value<BGSLocation> self, std::function<void(bool)> callback = {});
	bool IsSameLocation(Value<BGSLocation> self, Value<BGSLocation> akOtherLocation, Value<BGSKeyword> akKeyword, std::function<void(bool)> callback = {});
	void SetKeywordData(Value<BGSLocation> self, Value<BGSKeyword> akKeyword, float afData, std::function<void(void)> callback = {});
	void SetCleared(Value<BGSLocation> self, bool abCleared, std::function<void(void)> callback = {});
	std::string GetAssociatedSkill(Value<EffectSetting> self, std::function<void(std::string)> callback = {});
	void SetAssociatedSkill(Value<EffectSetting> self, std::string skill, std::function<void(void)> callback = {});
	std::string GetResistance(Value<EffectSetting> self, std::function<void(std::string)> callback = {});
	void SetResistance(Value<EffectSetting> self, std::string skill, std::function<void(void)> callback = {});
	bool IsEffectFlagSet(Value<EffectSetting> self, SInt32 flag, std::function<void(bool)> callback = {});
	void SetEffectFlag(Value<EffectSetting> self, SInt32 flag, std::function<void(void)> callback = {});
	void ClearEffectFlag(Value<EffectSetting> self, SInt32 flag, std::function<void(void)> callback = {});
	float GetCastTime(Value<EffectSetting> self, std::function<void(float)> callback = {});
	void SetCastTime(Value<EffectSetting> self, float castTime, std::function<void(void)> callback = {});
	SInt32 GetSkillLevel(Value<EffectSetting> self, std::function<void(SInt32)> callback = {});
	void SetSkillLevel(Value<EffectSetting> self, SInt32 level, std::function<void(void)> callback = {});
	SInt32 GetArea(Value<EffectSetting> self, std::function<void(SInt32)> callback = {});
	void SetArea(Value<EffectSetting> self, SInt32 area, std::function<void(void)> callback = {});
	float GetSkillUsageMult(Value<EffectSetting> self, std::function<void(float)> callback = {});
	void SetSkillUsageMult(Value<EffectSetting> self, float usageMult, std::function<void(void)> callback = {});
	float GetBaseCost(Value<EffectSetting> self, std::function<void(float)> callback = {});
	void SetBaseCost(Value<EffectSetting> self, float cost, std::function<void(void)> callback = {});
	Value<TESObjectLIGH> GetLight(Value<EffectSetting> self, std::function<void(Value<TESObjectLIGH>)> callback = {});
	void SetLight(Value<EffectSetting> self, Value<TESObjectLIGH> obj, std::function<void(void)> callback = {});
	Value<TESEffectShader> GetHitShader(Value<EffectSetting> self, std::function<void(Value<TESEffectShader>)> callback = {});
	void SetHitShader(Value<EffectSetting> self, Value<TESEffectShader> obj, std::function<void(void)> callback = {});
	Value<TESEffectShader> GetEnchantShader(Value<EffectSetting> self, std::function<void(Value<TESEffectShader>)> callback = {});
	void SetEnchantShader(Value<EffectSetting> self, Value<TESEffectShader> obj, std::function<void(void)> callback = {});
	Value<BGSProjectile> GetProjectile(Value<EffectSetting> self, std::function<void(Value<BGSProjectile>)> callback = {});
	void SetProjectile(Value<EffectSetting> self, Value<BGSProjectile> obj, std::function<void(void)> callback = {});
	Value<BGSExplosion> GetExplosion(Value<EffectSetting> self, std::function<void(Value<BGSExplosion>)> callback = {});
	void SetExplosion(Value<EffectSetting> self, Value<BGSExplosion> obj, std::function<void(void)> callback = {});
	Value<BGSArtObject> GetCastingArt(Value<EffectSetting> self, std::function<void(Value<BGSArtObject>)> callback = {});
	void SetCastingArt(Value<EffectSetting> self, Value<BGSArtObject> obj, std::function<void(void)> callback = {});
	Value<BGSArtObject> GetHitEffectArt(Value<EffectSetting> self, std::function<void(Value<BGSArtObject>)> callback = {});
	void SetHitEffectArt(Value<EffectSetting> self, Value<BGSArtObject> obj, std::function<void(void)> callback = {});
	Value<BGSArtObject> GetEnchantArt(Value<EffectSetting> self, std::function<void(Value<BGSArtObject>)> callback = {});
	void SetEnchantArt(Value<EffectSetting> self, Value<BGSArtObject> obj, std::function<void(void)> callback = {});
	Value<BGSImpactDataSet> GetImpactDataSet(Value<EffectSetting> self, std::function<void(Value<BGSImpactDataSet>)> callback = {});
	void SetImpactDataSet(Value<EffectSetting> self, Value<BGSImpactDataSet> obj, std::function<void(void)> callback = {});
	Value<SpellItem> GetEquipAbility(Value<EffectSetting> self, std::function<void(Value<SpellItem>)> callback = {});
	void SetEquipAbility(Value<EffectSetting> self, Value<SpellItem> obj, std::function<void(void)> callback = {});
	Value<TESImageSpaceModifier> GetImageSpaceMod(Value<EffectSetting> self, std::function<void(Value<TESImageSpaceModifier>)> callback = {});
	void SetImageSpaceMod(Value<EffectSetting> self, Value<TESImageSpaceModifier> obj, std::function<void(void)> callback = {});
	Value<BGSPerk> GetPerk(Value<EffectSetting> self, std::function<void(Value<BGSPerk>)> callback = {});
	void SetPerk(Value<EffectSetting> self, Value<BGSPerk> obj, std::function<void(void)> callback = {});
	SInt32 GetCastingType(Value<EffectSetting> self, std::function<void(SInt32)> callback = {});
	SInt32 GetDeliveryType(Value<EffectSetting> self, std::function<void(SInt32)> callback = {});
	float abs(float afValue, std::function<void(float)> callback = {});
	float acos(float afValue, std::function<void(float)> callback = {});
	float asin(float afValue, std::function<void(float)> callback = {});
	float atan(float afValue, std::function<void(float)> callback = {});
	SInt32 Ceiling(float afValue, std::function<void(SInt32)> callback = {});
	float cos(float afValue, std::function<void(float)> callback = {});
	float DegreesToRadians(float afDegrees, std::function<void(float)> callback = {});
	SInt32 Floor(float afValue, std::function<void(SInt32)> callback = {});
	float pow(float x, float y, std::function<void(float)> callback = {});
	float RadiansToDegrees(float afRadians, std::function<void(float)> callback = {});
	float sin(float afValue, std::function<void(float)> callback = {});
	float sqrt(float afValue, std::function<void(float)> callback = {});
	float tan(float afValue, std::function<void(float)> callback = {});
	SInt32 LeftShift(SInt32 value, SInt32 shiftBy, std::function<void(SInt32)> callback = {});
	SInt32 RightShift(SInt32 value, SInt32 shiftBy, std::function<void(SInt32)> callback = {});
	SInt32 LogicalAnd(SInt32 arg1, SInt32 arg2, std::function<void(SInt32)> callback = {});
	SInt32 LogicalOr(SInt32 arg1, SInt32 arg2, std::function<void(SInt32)> callback = {});
	SInt32 LogicalXor(SInt32 arg1, SInt32 arg2, std::function<void(SInt32)> callback = {});
	SInt32 LogicalNot(SInt32 arg1, std::function<void(SInt32)> callback = {});
	float Log(float arg1, std::function<void(float)> callback = {});
	SInt32 Show(Value<BGSMessage> self, float afArg1, float afArg2, float afArg3, float afArg4, float afArg5, float afArg6, float afArg7, float afArg8, float afArg9, std::function<void(SInt32)> callback = {});
	void ShowAsHelpMessage(Value<BGSMessage> self, std::string asEvent, float afDuration, float afInterval, SInt32 aiMaxTimes, std::function<void(void)> callback = {});
	void ResetHelpMessage(std::string asEvent, std::function<void(void)> callback = {});
	void Add(Value<BGSMusicType> self, std::function<void(void)> callback = {});
	void Remove(Value<BGSMusicType> self, std::function<void(void)> callback = {});
	bool rampRumble(Value<TESObjectREFR> self, float power, float duration, float falloff, std::function<void(bool)> callback = {});
	bool IsNearPlayer(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsInInterior(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool MoveToIfUnloaded(Value<TESObjectREFR> self, Value<TESObjectREFR> akTarget, float afXOffset, float afYOffset, float afZOffset, std::function<void(bool)> callback = {});
	void MoveToWhenUnloaded(Value<TESObjectREFR> self, Value<TESObjectREFR> akTarget, float afXOffset, float afYOffset, float afZOffset, std::function<void(void)> callback = {});
	void DeleteWhenAble(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	void AddKeyIfNeeded(Value<TESObjectREFR> self, Value<TESObjectREFR> ObjectWithNeededKey, std::function<void(void)> callback = {});
	bool Activate(Value<TESObjectREFR> self, Value<TESObjectREFR> akActivator, bool abDefaultProcessingOnly, std::function<void(bool)> callback = {});
	bool AddDependentAnimatedObjectReference(Value<TESObjectREFR> self, Value<TESObjectREFR> akDependent, std::function<void(bool)> callback = {});
	void AddInventoryEventFilter(Value<TESObjectREFR> self, Value<TESForm> akFilter, std::function<void(void)> callback = {});
	void AddItem(Value<TESObjectREFR> self, Value<TESForm> akItemToAdd, SInt32 aiCount, bool abSilent, std::function<void(void)> callback = {});
	void AddToMap(Value<TESObjectREFR> self, bool abAllowFastTravel, std::function<void(void)> callback = {});
	void ApplyHavokImpulse(Value<TESObjectREFR> self, float afX, float afY, float afZ, float afMagnitude, std::function<void(void)> callback = {});
	void BlockActivation(Value<TESObjectREFR> self, bool abBlocked, std::function<void(void)> callback = {});
	SInt32 CalculateEncounterLevel(Value<TESObjectREFR> self, SInt32 aiDifficulty, std::function<void(SInt32)> callback = {});
	bool CanFastTravelToMarker(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	void ClearDestruction(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	void CreateDetectionEvent(Value<TESObjectREFR> self, Value<Actor> akOwner, SInt32 aiSoundLevel, std::function<void(void)> callback = {});
	void DamageObject(Value<TESObjectREFR> self, float afDamage, std::function<void(void)> callback = {});
	void Delete(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	void Disable(Value<TESObjectREFR> self, bool abFadeOut, std::function<void(void)> callback = {});
	void DisableNoWait(Value<TESObjectREFR> self, bool abFadeOut, std::function<void(void)> callback = {});
	Value<TESObjectREFR> DropObject(Value<TESObjectREFR> self, Value<TESForm> akObject, SInt32 aiCount, std::function<void(Value<TESObjectREFR>)> callback = {});
	void Enable(Value<TESObjectREFR> self, bool abFadeIn, std::function<void(void)> callback = {});
	void EnableFastTravel(Value<TESObjectREFR> self, bool abEnable, std::function<void(void)> callback = {});
	void EnableNoWait(Value<TESObjectREFR> self, bool abFadeIn, std::function<void(void)> callback = {});
	void ForceAddRagdollToWorld(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	void ForceRemoveRagdollFromWorld(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	Value<TESNPC> GetActorOwner(Value<TESObjectREFR> self, std::function<void(Value<TESNPC>)> callback = {});
	bool GetAnimationVariableBool(Value<TESObjectREFR> self, std::string arVariableName, std::function<void(bool)> callback = {});
	SInt32 GetAnimationVariableInt(Value<TESObjectREFR> self, std::string arVariableName, std::function<void(SInt32)> callback = {});
	float GetAnimationVariableFloat(Value<TESObjectREFR> self, std::string arVariableName, std::function<void(float)> callback = {});
	SInt32 GetCurrentDestructionStage(Value<TESObjectREFR> self, std::function<void(SInt32)> callback = {});
	Value<BGSLocation> GetCurrentLocation(Value<TESObjectREFR> self, std::function<void(Value<BGSLocation>)> callback = {});
	Value<BGSScene> GetCurrentScene(Value<TESObjectREFR> self, std::function<void(Value<BGSScene>)> callback = {});
	float GetDistance(Value<TESObjectREFR> self, Value<TESObjectREFR> akOther, std::function<void(float)> callback = {});
	Value<BGSLocation> GetEditorLocation(Value<TESObjectREFR> self, std::function<void(Value<BGSLocation>)> callback = {});
	Value<TESFaction> GetFactionOwner(Value<TESObjectREFR> self, std::function<void(Value<TESFaction>)> callback = {});
	float GetHeadingAngle(Value<TESObjectREFR> self, Value<TESObjectREFR> akOther, std::function<void(float)> callback = {});
	float GetHeight(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	SInt32 GetItemCount(Value<TESObjectREFR> self, Value<TESForm> akItem, std::function<void(SInt32)> callback = {});
	float GetItemHealthPercent(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	Value<TESKey> GetKey(Value<TESObjectREFR> self, std::function<void(Value<TESKey>)> callback = {});
	float GetLength(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	Value<TESObjectREFR> GetLinkedRef(Value<TESObjectREFR> self, Value<BGSKeyword> apKeyword, std::function<void(Value<TESObjectREFR>)> callback = {});
	SInt32 GetLockLevel(Value<TESObjectREFR> self, std::function<void(SInt32)> callback = {});
	SInt32 countLinkedRefChain(Value<TESObjectREFR> self, Value<BGSKeyword> apKeyword, SInt32 maxExpectedLinkedRefs, std::function<void(SInt32)> callback = {});
	Value<TESObjectREFR> GetNthLinkedRef(Value<TESObjectREFR> self, SInt32 aiLinkedRef, std::function<void(Value<TESObjectREFR>)> callback = {});
	void EnableLinkChain(Value<TESObjectREFR> self, Value<BGSKeyword> apKeyword, std::function<void(void)> callback = {});
	void DisableLinkChain(Value<TESObjectREFR> self, Value<BGSKeyword> apKeyword, bool abFadeOut, std::function<void(void)> callback = {});
	float GetMass(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	SInt32 GetOpenState(Value<TESObjectREFR> self, std::function<void(SInt32)> callback = {});
	Value<TESObjectCELL> GetParentCell(Value<TESObjectREFR> self, std::function<void(Value<TESObjectCELL>)> callback = {});
	float GetScale(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	SInt32 GetTriggerObjectCount(Value<TESObjectREFR> self, std::function<void(SInt32)> callback = {});
	Value<BGSVoiceType> GetVoiceType(Value<TESObjectREFR> self, std::function<void(Value<BGSVoiceType>)> callback = {});
	float GetWidth(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	Value<TESWorldSpace> GetWorldSpace(Value<TESObjectREFR> self, std::function<void(Value<TESWorldSpace>)> callback = {});
	Value<Actor> GetSelfAsActor(Value<TESObjectREFR> self, std::function<void(Value<Actor>)> callback = {});
	bool HasEffectKeyword(Value<TESObjectREFR> self, Value<BGSKeyword> akKeyword, std::function<void(bool)> callback = {});
	bool HasNode(Value<TESObjectREFR> self, std::string asNodeName, std::function<void(bool)> callback = {});
	bool HasRefType(Value<TESObjectREFR> self, Value<BGSLocationRefType> akRefType, std::function<void(bool)> callback = {});
	void IgnoreFriendlyHits(Value<TESObjectREFR> self, bool abIgnore, std::function<void(void)> callback = {});
	void InterruptCast(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	bool IsActivateChild(Value<TESObjectREFR> self, Value<TESObjectREFR> akChild, std::function<void(bool)> callback = {});
	bool IsActivationBlocked(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool Is3DLoaded(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsDeleted(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsDisabled(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsEnabled(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsFurnitureInUse(Value<TESObjectREFR> self, bool abIgnoreReserved, std::function<void(bool)> callback = {});
	bool IsFurnitureMarkerInUse(Value<TESObjectREFR> self, SInt32 aiMarker, bool abIgnoreReserved, std::function<void(bool)> callback = {});
	bool IsIgnoringFriendlyHits(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsInDialogueWithPlayer(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsLockBroken(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsLocked(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	bool IsMapMarkerVisible(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	void KnockAreaEffect(Value<TESObjectREFR> self, float afMagnitude, float afRadius, std::function<void(void)> callback = {});
	void Lock(Value<TESObjectREFR> self, bool abLock, bool abAsOwner, std::function<void(void)> callback = {});
	void MoveTo(Value<TESObjectREFR> self, Value<TESObjectREFR> akTarget, float afXOffset, float afYOffset, float afZOffset, bool abMatchRotation, std::function<void(void)> callback = {});
	void MoveToInteractionLocation(Value<TESObjectREFR> self, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	void MoveToMyEditorLocation(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	void MoveToNode(Value<TESObjectREFR> self, Value<TESObjectREFR> akTarget, std::string asNodeName, std::function<void(void)> callback = {});
	Value<TESObjectREFR> PlaceAtMe(Value<TESObjectREFR> self, Value<TESForm> akFormToPlace, SInt32 aiCount, bool abForcePersist, bool abInitiallyDisabled, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<Actor> PlaceActorAtMe(Value<TESObjectREFR> self, Value<TESNPC> akActorToPlace, SInt32 aiLevelMod, Value<BGSEncounterZone> akZone, std::function<void(Value<Actor>)> callback = {});
	bool PlayAnimation(Value<TESObjectREFR> self, std::string asAnimation, std::function<void(bool)> callback = {});
	bool PlayAnimationAndWait(Value<TESObjectREFR> self, std::string asAnimation, std::string asEventName, std::function<void(bool)> callback = {});
	bool PlayGamebryoAnimation(Value<TESObjectREFR> self, std::string asAnimation, bool abStartOver, float afEaseInTime, std::function<void(bool)> callback = {});
	bool PlayImpactEffect(Value<TESObjectREFR> self, Value<BGSImpactDataSet> akImpactEffect, std::string asNodeName, float afPickDirX, float afPickDirY, float afPickDirZ, float afPickLength, bool abApplyNodeRotation, bool abUseNodeLocalRotation, std::function<void(bool)> callback = {});
	bool PlaySyncedAnimationSS(Value<TESObjectREFR> self, std::string asAnimation1, Value<TESObjectREFR> akObj2, std::string asAnimation2, std::function<void(bool)> callback = {});
	bool PlaySyncedAnimationAndWaitSS(Value<TESObjectREFR> self, std::string asAnimation1, std::string asEvent1, Value<TESObjectREFR> akObj2, std::string asAnimation2, std::string asEvent2, std::function<void(bool)> callback = {});
	void PlayTerrainEffect(Value<TESObjectREFR> self, std::string asEffectModelName, std::string asAttachBoneName, std::function<void(void)> callback = {});
	void ProcessTrapHit(Value<TESObjectREFR> self, Value<TESObjectREFR> akTrap, float afDamage, float afPushback, float afXVel, float afYVel, float afZVel, float afXPos, float afYPos, float afZPos, SInt32 aeMaterial, float afStagger, std::function<void(void)> callback = {});
	void PushActorAway(Value<TESObjectREFR> self, Value<Actor> akActorToPush, float aiKnockbackForce, std::function<void(void)> callback = {});
	void RemoveAllInventoryEventFilters(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	void RemoveAllItems(Value<TESObjectREFR> self, Value<TESObjectREFR> akTransferTo, bool abKeepOwnership, bool abRemoveQuestItems, std::function<void(void)> callback = {});
	void RemoveInventoryEventFilter(Value<TESObjectREFR> self, Value<TESForm> akFilter, std::function<void(void)> callback = {});
	void RemoveItem(Value<TESObjectREFR> self, Value<TESForm> akItemToRemove, SInt32 aiCount, bool abSilent, Value<TESObjectREFR> akOtherContainer, std::function<void(void)> callback = {});
	bool RemoveDependentAnimatedObjectReference(Value<TESObjectREFR> self, Value<TESObjectREFR> akDependent, std::function<void(bool)> callback = {});
	void Reset(Value<TESObjectREFR> self, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	void Say(Value<Actor> akActorToSpeakAs, bool abSpeakInPlayersHead, std::function<void(void)> callback = {});
	void SendStealAlarm(Value<TESObjectREFR> self, Value<Actor> akThief, std::function<void(void)> callback = {});
	void SetActorCause(Value<TESObjectREFR> self, Value<Actor> akActor, std::function<void(void)> callback = {});
	void SetActorOwner(Value<TESObjectREFR> self, Value<TESNPC> akActorBase, std::function<void(void)> callback = {});
	void SetAngle(Value<TESObjectREFR> self, float afXAngle, float afYAngle, float afZAngle, std::function<void(void)> callback = {});
	void SetAnimationVariableBool(Value<TESObjectREFR> self, std::string arVariableName, bool abNewValue, std::function<void(void)> callback = {});
	void SetAnimationVariableInt(Value<TESObjectREFR> self, std::string arVariableName, SInt32 aiNewValue, std::function<void(void)> callback = {});
	void SetAnimationVariableFloat(Value<TESObjectREFR> self, std::string arVariableName, float afNewValue, std::function<void(void)> callback = {});
	void SetDestroyed(Value<TESObjectREFR> self, bool abDestroyed, std::function<void(void)> callback = {});
	void SetFactionOwner(Value<TESObjectREFR> self, Value<TESFaction> akFaction, std::function<void(void)> callback = {});
	void SetLockLevel(Value<TESObjectREFR> self, SInt32 aiLockLevel, std::function<void(void)> callback = {});
	void SetMotionType(Value<TESObjectREFR> self, SInt32 aeMotionType, bool abAllowActivate, std::function<void(void)> callback = {});
	void SetNoFavorAllowed(Value<TESObjectREFR> self, bool abNoFavor, std::function<void(void)> callback = {});
	void SetOpen(Value<TESObjectREFR> self, bool abOpen, std::function<void(void)> callback = {});
	void SetPosition(Value<TESObjectREFR> self, float afX, float afY, float afZ, std::function<void(void)> callback = {});
	void SetPosition(Value<TESObjectREFR> self, NiPoint3 pos, std::function<void(void)> callback = {});
	void SetScale(Value<TESObjectREFR> self, float afScale, std::function<void(void)> callback = {});
	void TranslateTo(Value<TESObjectREFR> self, float afX, float afY, float afZ, float afXAngle, float afYAngle, float afZAngle, float afSpeed, float afMaxRotationSpeed, std::function<void(void)> callback = {});
	void SplineTranslateTo(Value<TESObjectREFR> self, float afX, float afY, float afZ, float afXAngle, float afYAngle, float afZAngle, float afTangentMagnitude, float afSpeed, float afMaxRotationSpeed, std::function<void(void)> callback = {});
	void SplineTranslateToRefNode(Value<TESObjectREFR> self, Value<TESObjectREFR> arTarget, std::string arNodeName, float afTangentMagnitude, float afSpeed, float afMaxRotationSpeed, std::function<void(void)> callback = {});
	void StopTranslation(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	void TranslateToRef(Value<TESObjectREFR> self, Value<TESObjectREFR> arTarget, float afSpeed, float afMaxRotationSpeed, std::function<void(void)> callback = {});
	void SplineTranslateToRef(Value<TESObjectREFR> self, Value<TESObjectREFR> arTarget, float afTangentMagnitude, float afSpeed, float afMaxRotationSpeed, std::function<void(void)> callback = {});
	void TetherToHorse(Value<TESObjectREFR> self, Value<TESObjectREFR> akHorse, std::function<void(void)> callback = {});
	bool WaitForAnimationEvent(Value<TESObjectREFR> self, std::string asEventName, std::function<void(bool)> callback = {});
	bool IsInLocation(Value<TESObjectREFR> self, Value<BGSLocation> akLocation, std::function<void(bool)> callback = {});
	SInt32 GetNumItems(Value<TESObjectREFR> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetNthForm(Value<TESObjectREFR> self, SInt32 index, std::function<void(Value<TESForm>)> callback = {});
	float GetTotalItemWeight(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	float GetTotalArmorWeight(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	bool IsHarvested(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	void SetHarvested(Value<TESObjectREFR> self, bool harvested, std::function<void(void)> callback = {});
	void SetItemHealthPercent(Value<TESObjectREFR> self, float health, std::function<void(void)> callback = {});
	void SetItemMaxCharge(Value<TESObjectREFR> self, float maxCharge, std::function<void(void)> callback = {});
	float GetItemMaxCharge(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	float GetItemCharge(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	void SetItemCharge(Value<TESObjectREFR> self, float charge, std::function<void(void)> callback = {});
	void ResetInventory(Value<TESObjectREFR> self, std::function<void(void)> callback = {});
	bool IsOffLimits(Value<TESObjectREFR> self, std::function<void(bool)> callback = {});
	std::string GetDisplayName(Value<TESObjectREFR> self, std::function<void(std::string)> callback = {});
	bool SetDisplayName(Value<TESObjectREFR> self, std::string name, bool force, std::function<void(bool)> callback = {});
	Value<TESObjectREFR> GetEnableParent(Value<TESObjectREFR> self, std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<EnchantmentItem> GetEnchantment(Value<TESObjectREFR> self, std::function<void(Value<EnchantmentItem>)> callback = {});
	void SetEnchantment(Value<TESObjectREFR> self, Value<EnchantmentItem> source, float maxCharge, std::function<void(void)> callback = {});
	SInt32 GetNumReferenceAliases(Value<TESObjectREFR> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetNthReferenceAlias(Value<TESObjectREFR> self, SInt32 n, std::function<void(Value<TESForm>)> callback = {});
	Value<AlchemyItem> GetPoison(Value<TESObjectREFR> self, std::function<void(Value<AlchemyItem>)> callback = {});
	void GetAllForms(Value<TESObjectREFR> self, Value<BGSListForm> toFill, std::function<void(void)> callback = {});
	SInt32 GetNumParts(Value<BGSOutfit> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetNthPart(Value<BGSOutfit> self, SInt32 n, std::function<void(Value<TESForm>)> callback = {});
	Value<TESQuest> GetOwningQuest(Value<TESPackage> self, std::function<void(Value<TESQuest>)> callback = {});
	Value<TESPackage> GetTemplate(Value<TESPackage> self, std::function<void(Value<TESPackage>)> callback = {});
	Value<BGSPerk> GetNextPerk(Value<BGSPerk> self, std::function<void(Value<BGSPerk>)> callback = {});
	SInt32 GetNumEntries(Value<BGSPerk> self, std::function<void(SInt32)> callback = {});
	SInt32 GetNthEntryRank(Value<BGSPerk> self, SInt32 n, std::function<void(SInt32)> callback = {});
	bool SetNthEntryRank(Value<BGSPerk> self, SInt32 n, SInt32 rank, std::function<void(bool)> callback = {});
	SInt32 GetNthEntryPriority(Value<BGSPerk> self, SInt32 n, std::function<void(SInt32)> callback = {});
	bool SetNthEntryPriority(Value<BGSPerk> self, SInt32 n, SInt32 priority, std::function<void(bool)> callback = {});
	Value<TESQuest> GetNthEntryQuest(Value<BGSPerk> self, SInt32 n, std::function<void(Value<TESQuest>)> callback = {});
	bool SetNthEntryQuest(Value<BGSPerk> self, SInt32 n, Value<TESQuest> newQuest, std::function<void(bool)> callback = {});
	SInt32 GetNthEntryStage(Value<BGSPerk> self, SInt32 n, std::function<void(SInt32)> callback = {});
	bool SetNthEntryStage(Value<BGSPerk> self, SInt32 n, SInt32 stage, std::function<void(bool)> callback = {});
	Value<SpellItem> GetNthEntrySpell(Value<BGSPerk> self, SInt32 n, std::function<void(Value<SpellItem>)> callback = {});
	bool SetNthEntrySpell(Value<BGSPerk> self, SInt32 n, Value<SpellItem> newSpell, std::function<void(bool)> callback = {});
	Value<TESLevItem> GetNthEntryLeveledList(Value<BGSPerk> self, SInt32 n, std::function<void(Value<TESLevItem>)> callback = {});
	bool SetNthEntryLeveledList(Value<BGSPerk> self, SInt32 n, Value<TESLevItem> lList, std::function<void(bool)> callback = {});
	std::string GetNthEntryText(Value<BGSPerk> self, SInt32 n, std::function<void(std::string)> callback = {});
	bool SetNthEntryText(Value<BGSPerk> self, SInt32 n, std::string newText, std::function<void(bool)> callback = {});
	float GetNthEntryValue(Value<BGSPerk> self, SInt32 n, SInt32 i, std::function<void(float)> callback = {});
	bool SetNthEntryValue(Value<BGSPerk> self, SInt32 n, SInt32 i, float value, std::function<void(bool)> callback = {});
	bool IsHostile(Value<AlchemyItem> self, std::function<void(bool)> callback = {});
	bool IsFood(Value<AlchemyItem> self, std::function<void(bool)> callback = {});
	bool IsPoison(Value<AlchemyItem> self, std::function<void(bool)> callback = {});
	SInt32 GetNumEffects(Value<AlchemyItem> self, std::function<void(SInt32)> callback = {});
	float GetNthEffectMagnitude(Value<AlchemyItem> self, SInt32 index, std::function<void(float)> callback = {});
	SInt32 GetNthEffectArea(Value<AlchemyItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	SInt32 GetNthEffectDuration(Value<AlchemyItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	Value<EffectSetting> GetNthEffectMagicEffect(Value<AlchemyItem> self, SInt32 index, std::function<void(Value<EffectSetting>)> callback = {});
	SInt32 GetCostliestEffectIndex(Value<AlchemyItem> self, std::function<void(SInt32)> callback = {});
	void SetNthEffectMagnitude(Value<AlchemyItem> self, SInt32 index, float value, std::function<void(void)> callback = {});
	void SetNthEffectArea(Value<AlchemyItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	void SetNthEffectDuration(Value<AlchemyItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	Value<BGSSoundDescriptorForm> GetUseSound(Value<AlchemyItem> self, std::function<void(Value<BGSSoundDescriptorForm>)> callback = {});
	bool ModObjectiveGlobal(Value<TESQuest> self, float afModValue, Value<TESGlobal> aModGlobal, SInt32 aiObjectiveID, float afTargetValue, bool abCountingUp, bool abCompleteObjective, bool abRedisplayObjective, std::function<void(bool)> callback = {});
	void CompleteAllObjectives(Value<TESQuest> self, std::function<void(void)> callback = {});
	void CompleteQuest(Value<TESQuest> self, std::function<void(void)> callback = {});
	void FailAllObjectives(Value<TESQuest> self, std::function<void(void)> callback = {});
	Value<TESForm> GetAlias(Value<TESQuest> self, SInt32 aiAliasID, std::function<void(Value<TESForm>)> callback = {});
	SInt32 GetCurrentStageID(Value<TESQuest> self, std::function<void(SInt32)> callback = {});
	SInt32 GetStage(Value<TESQuest> self, std::function<void(SInt32)> callback = {});
	bool GetStageDone(Value<TESQuest> self, SInt32 aiStage, std::function<void(bool)> callback = {});
	bool IsActive(Value<TESQuest> self, std::function<void(bool)> callback = {});
	bool IsCompleted(Value<TESQuest> self, std::function<void(bool)> callback = {});
	bool IsObjectiveCompleted(Value<TESQuest> self, SInt32 aiObjective, std::function<void(bool)> callback = {});
	bool IsObjectiveDisplayed(Value<TESQuest> self, SInt32 aiObjective, std::function<void(bool)> callback = {});
	bool IsObjectiveFailed(Value<TESQuest> self, SInt32 aiObjective, std::function<void(bool)> callback = {});
	bool IsRunning(Value<TESQuest> self, std::function<void(bool)> callback = {});
	bool IsStageDone(Value<TESQuest> self, SInt32 aiStage, std::function<void(bool)> callback = {});
	bool IsStarting(Value<TESQuest> self, std::function<void(bool)> callback = {});
	bool IsStopping(Value<TESQuest> self, std::function<void(bool)> callback = {});
	bool IsStopped(Value<TESQuest> self, std::function<void(bool)> callback = {});
	void Reset(Value<TESQuest> self, std::function<void(void)> callback = {});
	void SetActive(Value<TESQuest> self, bool abActive, std::function<void(void)> callback = {});
	bool SetCurrentStageID(Value<TESQuest> self, SInt32 aiStageID, std::function<void(bool)> callback = {});
	void SetObjectiveCompleted(Value<TESQuest> self, SInt32 aiObjective, bool abCompleted, std::function<void(void)> callback = {});
	void SetObjectiveDisplayed(Value<TESQuest> self, SInt32 aiObjective, bool abDisplayed, bool abForce, std::function<void(void)> callback = {});
	void SetObjectiveFailed(Value<TESQuest> self, SInt32 aiObjective, bool abFailed, std::function<void(void)> callback = {});
	bool SetStage(Value<TESQuest> self, SInt32 aiStage, std::function<void(bool)> callback = {});
	bool Start(Value<TESQuest> self, std::function<void(bool)> callback = {});
	void Stop(Value<TESQuest> self, std::function<void(void)> callback = {});
	bool UpdateCurrentInstanceGlobal(Value<TESQuest> self, Value<TESGlobal> aUpdateGlobal, std::function<void(bool)> callback = {});
	Value<TESQuest> GetQuest(std::string editorId, std::function<void(Value<TESQuest>)> callback = {});
	std::string GetID(Value<TESQuest> self, std::function<void(std::string)> callback = {});
	SInt32 GetPriority(Value<TESQuest> self, std::function<void(SInt32)> callback = {});
	SInt32 GetNumAliases(Value<TESQuest> self, std::function<void(SInt32)> callback = {});
	Value<TESForm> GetNthAlias(Value<TESQuest> self, SInt32 index, std::function<void(Value<TESForm>)> callback = {});
	Value<TESForm> GetAliasByName(Value<TESQuest> self, std::string name, std::function<void(Value<TESForm>)> callback = {});
	Value<TESForm> GetAliasById(Value<TESQuest> self, SInt32 aliasId, std::function<void(Value<TESForm>)> callback = {});
	SInt32 GetSpellCount(Value<TESRace> self, std::function<void(SInt32)> callback = {});
	Value<SpellItem> GetNthSpell(Value<TESRace> self, SInt32 n, std::function<void(Value<SpellItem>)> callback = {});
	bool IsRaceFlagSet(Value<TESRace> self, SInt32 n, std::function<void(bool)> callback = {});
	void SetRaceFlag(Value<TESRace> self, SInt32 n, std::function<void(void)> callback = {});
	void ClearRaceFlag(Value<TESRace> self, SInt32 n, std::function<void(void)> callback = {});
	Value<BGSVoiceType> GetDefaultVoiceType(Value<TESRace> self, bool female, std::function<void(Value<BGSVoiceType>)> callback = {});
	void SetDefaultVoiceType(Value<TESRace> self, bool female, Value<BGSVoiceType> voice, std::function<void(void)> callback = {});
	Value<TESObjectARMO> GetSkin(Value<TESRace> self, std::function<void(Value<TESObjectARMO>)> callback = {});
	void SetSkin(Value<TESRace> self, Value<TESObjectARMO> skin, std::function<void(void)> callback = {});
	SInt32 GetNumPlayableRaces(std::function<void(SInt32)> callback = {});
	Value<TESRace> GetNthPlayableRace(SInt32 n, std::function<void(Value<TESRace>)> callback = {});
	Value<TESRace> GetRace(std::string editorId, std::function<void(Value<TESRace>)> callback = {});
	bool IsPlayable(Value<TESRace> self, std::function<void(bool)> callback = {});
	void MakePlayable(Value<TESRace> self, std::function<void(void)> callback = {});
	void MakeUnplayable(Value<TESRace> self, std::function<void(void)> callback = {});
	bool IsChildRace(Value<TESRace> self, std::function<void(bool)> callback = {});
	void MakeChildRace(Value<TESRace> self, std::function<void(void)> callback = {});
	void MakeNonChildRace(Value<TESRace> self, std::function<void(void)> callback = {});
	bool CanFly(Value<TESRace> self, std::function<void(bool)> callback = {});
	void MakeCanFly(Value<TESRace> self, std::function<void(void)> callback = {});
	void MakeNonFlying(Value<TESRace> self, std::function<void(void)> callback = {});
	bool CanSwim(Value<TESRace> self, std::function<void(bool)> callback = {});
	void MakeCanSwim(Value<TESRace> self, std::function<void(void)> callback = {});
	void MakeNonSwimming(Value<TESRace> self, std::function<void(void)> callback = {});
	bool CanWalk(Value<TESRace> self, std::function<void(bool)> callback = {});
	void MakeCanWalk(Value<TESRace> self, std::function<void(void)> callback = {});
	void MakeNonWalking(Value<TESRace> self, std::function<void(void)> callback = {});
	bool IsImmobile(Value<TESRace> self, std::function<void(bool)> callback = {});
	void MakeImmobile(Value<TESRace> self, std::function<void(void)> callback = {});
	void MakeMobile(Value<TESRace> self, std::function<void(void)> callback = {});
	bool IsNotPushable(Value<TESRace> self, std::function<void(bool)> callback = {});
	void MakeNotPushable(Value<TESRace> self, std::function<void(void)> callback = {});
	void MakePushable(Value<TESRace> self, std::function<void(void)> callback = {});
	bool NoKnockdowns(Value<TESRace> self, std::function<void(bool)> callback = {});
	void MakeNoKnockdowns(Value<TESRace> self, std::function<void(void)> callback = {});
	void ClearNoKNockdowns(Value<TESRace> self, std::function<void(void)> callback = {});
	bool NoCombatInWater(Value<TESRace> self, std::function<void(bool)> callback = {});
	void SetNoCombatInWater(Value<TESRace> self, std::function<void(void)> callback = {});
	void ClearNoCombatInWater(Value<TESRace> self, std::function<void(void)> callback = {});
	bool AvoidsRoads(Value<TESRace> self, std::function<void(bool)> callback = {});
	void SetAvoidsRoads(Value<TESRace> self, std::function<void(void)> callback = {});
	void ClearAvoidsRoads(Value<TESRace> self, std::function<void(void)> callback = {});
	bool AllowPickpocket(Value<TESRace> self, std::function<void(bool)> callback = {});
	void SetAllowPickpocket(Value<TESRace> self, std::function<void(void)> callback = {});
	void ClearAllowPickpocket(Value<TESRace> self, std::function<void(void)> callback = {});
	bool AllowPCDialogue(Value<TESRace> self, std::function<void(bool)> callback = {});
	void SetAllowPCDialogue(Value<TESRace> self, std::function<void(void)> callback = {});
	void ClearAllowPCDialogue(Value<TESRace> self, std::function<void(void)> callback = {});
	bool CantOpenDoors(Value<TESRace> self, std::function<void(bool)> callback = {});
	void SetCantOpenDoors(Value<TESRace> self, std::function<void(void)> callback = {});
	void ClearCantOpenDoors(Value<TESRace> self, std::function<void(void)> callback = {});
	bool NoShadow(Value<TESRace> self, std::function<void(bool)> callback = {});
	void SetNoShadow(Value<TESRace> self, std::function<void(void)> callback = {});
	void ClearNoShadow(Value<TESRace> self, std::function<void(void)> callback = {});
	void Cast(Value<ScrollItem> self, Value<TESObjectREFR> akSource, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	float GetCastTime(Value<ScrollItem> self, std::function<void(float)> callback = {});
	Value<BGSPerk> GetPerk(Value<ScrollItem> self, std::function<void(Value<BGSPerk>)> callback = {});
	SInt32 GetNumEffects(Value<ScrollItem> self, std::function<void(SInt32)> callback = {});
	float GetNthEffectMagnitude(Value<ScrollItem> self, SInt32 index, std::function<void(float)> callback = {});
	SInt32 GetNthEffectArea(Value<ScrollItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	SInt32 GetNthEffectDuration(Value<ScrollItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	Value<EffectSetting> GetNthEffectMagicEffect(Value<ScrollItem> self, SInt32 index, std::function<void(Value<EffectSetting>)> callback = {});
	SInt32 GetCostliestEffectIndex(Value<ScrollItem> self, std::function<void(SInt32)> callback = {});
	void SetNthEffectMagnitude(Value<ScrollItem> self, SInt32 index, float value, std::function<void(void)> callback = {});
	void SetNthEffectArea(Value<ScrollItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	void SetNthEffectDuration(Value<ScrollItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	Value<BGSEquipSlot> GetEquipType(Value<ScrollItem> self, std::function<void(Value<BGSEquipSlot>)> callback = {});
	void SetEquipType(Value<ScrollItem> self, Value<BGSEquipSlot> type, std::function<void(void)> callback = {});
	Value<TESWordOfPower> GetNthWordOfPower(Value<TESShout> self, SInt32 n, std::function<void(Value<TESWordOfPower>)> callback = {});
	Value<SpellItem> GetNthSpell(Value<TESShout> self, SInt32 n, std::function<void(Value<SpellItem>)> callback = {});
	float GetNthRecoveryTime(Value<TESShout> self, SInt32 n, std::function<void(float)> callback = {});
	void SetNthWordOfPower(Value<TESShout> self, SInt32 n, Value<TESWordOfPower> aWoop, std::function<void(void)> callback = {});
	void SetNthSpell(Value<TESShout> self, SInt32 n, Value<SpellItem> aSpell, std::function<void(void)> callback = {});
	void SetNthRecoveryTime(Value<TESShout> self, SInt32 n, float time, std::function<void(void)> callback = {});
	SInt32 GetSoulSize(Value<TESSoulGem> self, std::function<void(SInt32)> callback = {});
	SInt32 GetGemSize(Value<TESSoulGem> self, std::function<void(SInt32)> callback = {});
	SInt32 Play(Value<TESSound> self, Value<TESObjectREFR> akSource, std::function<void(SInt32)> callback = {});
	bool PlayAndWait(Value<TESSound> self, Value<TESObjectREFR> akSource, std::function<void(bool)> callback = {});
	void StopInstance(SInt32 aiPlaybackInstance, std::function<void(void)> callback = {});
	void SetInstanceVolume(SInt32 aiPlaybackInstance, float afVolume, std::function<void(void)> callback = {});
	Value<BGSSoundDescriptorForm> GetDescriptor(Value<TESSound> self, std::function<void(Value<BGSSoundDescriptorForm>)> callback = {});
	void Cast(Value<SpellItem> self, Value<TESObjectREFR> akSource, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	void RemoteCast(Value<SpellItem> self, Value<TESObjectREFR> akSource, Value<Actor> akBlameActor, Value<TESObjectREFR> akTarget, std::function<void(void)> callback = {});
	bool IsHostile(Value<SpellItem> self, std::function<void(bool)> callback = {});
	void Preload(Value<SpellItem> self, std::function<void(void)> callback = {});
	void Unload(Value<SpellItem> self, std::function<void(void)> callback = {});
	float GetCastTime(Value<SpellItem> self, std::function<void(float)> callback = {});
	Value<BGSPerk> GetPerk(Value<SpellItem> self, std::function<void(Value<BGSPerk>)> callback = {});
	SInt32 GetNumEffects(Value<SpellItem> self, std::function<void(SInt32)> callback = {});
	float GetNthEffectMagnitude(Value<SpellItem> self, SInt32 index, std::function<void(float)> callback = {});
	SInt32 GetNthEffectArea(Value<SpellItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	SInt32 GetNthEffectDuration(Value<SpellItem> self, SInt32 index, std::function<void(SInt32)> callback = {});
	Value<EffectSetting> GetNthEffectMagicEffect(Value<SpellItem> self, SInt32 index, std::function<void(Value<EffectSetting>)> callback = {});
	SInt32 GetCostliestEffectIndex(Value<SpellItem> self, std::function<void(SInt32)> callback = {});
	SInt32 GetMagickaCost(Value<SpellItem> self, std::function<void(SInt32)> callback = {});
	SInt32 GetEffectiveMagickaCost(Value<SpellItem> self, Value<Actor> caster, std::function<void(SInt32)> callback = {});
	void SetNthEffectMagnitude(Value<SpellItem> self, SInt32 index, float value, std::function<void(void)> callback = {});
	void SetNthEffectArea(Value<SpellItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	void SetNthEffectDuration(Value<SpellItem> self, SInt32 index, SInt32 value, std::function<void(void)> callback = {});
	Value<BGSEquipSlot> GetEquipType(Value<SpellItem> self, std::function<void(Value<BGSEquipSlot>)> callback = {});
	void SetEquipType(Value<SpellItem> self, Value<BGSEquipSlot> type, std::function<void(void)> callback = {});
	void Add(Value<TESTopic> self, std::function<void(void)> callback = {});
	Value<BGSSoundDescriptorForm> GetHarvestSound(Value<TESObjectTREE> self, std::function<void(Value<BGSSoundDescriptorForm>)> callback = {});
	void SetHarvestSound(Value<TESObjectTREE> self, Value<BGSSoundDescriptorForm> akSoundDescriptor, std::function<void(void)> callback = {});
	Value<TESForm> GetIngredient(Value<TESObjectTREE> self, std::function<void(Value<TESForm>)> callback = {});
	void SetIngredient(Value<TESObjectTREE> self, Value<TESForm> akIngredient, std::function<void(void)> callback = {});
	std::string GameTimeToString(float afGameTime, std::function<void(std::string)> callback = {});
	float GetCurrentGameTime(std::function<void(float)> callback = {});
	float GetCurrentRealTime(std::function<void(float)> callback = {});
	bool IsInMenuMode(std::function<void(bool)> callback = {});
	SInt32 RandomInt(SInt32 aiMin, SInt32 aiMax, std::function<void(SInt32)> callback = {});
	float RandomFloat(float afMin, float afMax, std::function<void(float)> callback = {});
	void SetINIFloat(std::string ini, float value, std::function<void(void)> callback = {});
	void SetINIInt(std::string ini, SInt32 value, std::function<void(void)> callback = {});
	void SetINIBool(std::string ini, bool value, std::function<void(void)> callback = {});
	void SetINIString(std::string ini, std::string value, std::function<void(void)> callback = {});
	void Wait(float afSeconds, std::function<void(void)> callback = {});
	void WaitGameTime(float afHours, std::function<void(void)> callback = {});
	void WaitMenuMode(float afSeconds, std::function<void(void)> callback = {});
	std::string CaptureFrameRate(SInt32 numFrames, std::function<void(std::string)> callback = {});
	void StartFrameRateCapture(std::function<void(void)> callback = {});
	void EndFrameRateCapture(std::function<void(void)> callback = {});
	float GetAverageFrameRate(std::function<void(float)> callback = {});
	float GetMinFrameRate(std::function<void(float)> callback = {});
	float GetMaxFrameRate(std::function<void(float)> callback = {});
	SInt32 GetCurrentMemory(std::function<void(SInt32)> callback = {});
	SInt32 GetBudgetCount(std::function<void(SInt32)> callback = {});
	SInt32 GetCurrentBudget(SInt32 aiBudgetNumber, std::function<void(SInt32)> callback = {});
	bool OverBudget(SInt32 aiBudgetNumber, std::function<void(bool)> callback = {});
	std::string GetBudgetName(SInt32 aiBudgetNumber, std::function<void(std::string)> callback = {});
	float GetINIFloat(std::string ini, std::function<void(float)> callback = {});
	SInt32 GetINIInt(std::string ini, std::function<void(SInt32)> callback = {});
	bool GetINIBool(std::string ini, std::function<void(bool)> callback = {});
	std::string GetINIString(std::string ini, std::function<void(std::string)> callback = {});
	void Fire(Value<TESObjectWEAP> self, Value<TESObjectREFR> akSource, Value<TESAmmo> akAmmo, std::function<void(void)> callback = {});
	SInt32 GetBaseDamage(Value<TESObjectWEAP> self, std::function<void(SInt32)> callback = {});
	void SetBaseDamage(Value<TESObjectWEAP> self, SInt32 damage, std::function<void(void)> callback = {});
	SInt32 GetCritDamage(Value<TESObjectWEAP> self, std::function<void(SInt32)> callback = {});
	void SetCritDamage(Value<TESObjectWEAP> self, SInt32 damage, std::function<void(void)> callback = {});
	float GetReach(Value<TESObjectWEAP> self, std::function<void(float)> callback = {});
	void SetReach(Value<TESObjectWEAP> self, float reach, std::function<void(void)> callback = {});
	float GetMinRange(Value<TESObjectWEAP> self, std::function<void(float)> callback = {});
	void SetMinRange(Value<TESObjectWEAP> self, float minRange, std::function<void(void)> callback = {});
	float GetMaxRange(Value<TESObjectWEAP> self, std::function<void(float)> callback = {});
	void SetMaxRange(Value<TESObjectWEAP> self, float maxRange, std::function<void(void)> callback = {});
	float GetSpeed(Value<TESObjectWEAP> self, std::function<void(float)> callback = {});
	void SetSpeed(Value<TESObjectWEAP> self, float speed, std::function<void(void)> callback = {});
	float GetStagger(Value<TESObjectWEAP> self, std::function<void(float)> callback = {});
	void SetStagger(Value<TESObjectWEAP> self, float stagger, std::function<void(void)> callback = {});
	SInt32 GetWeaponType(Value<TESObjectWEAP> self, std::function<void(SInt32)> callback = {});
	void SetWeaponType(Value<TESObjectWEAP> self, SInt32 type, std::function<void(void)> callback = {});
	std::string GetModelPath(Value<TESObjectWEAP> self, std::function<void(std::string)> callback = {});
	void SetModelPath(Value<TESObjectWEAP> self, std::string path, std::function<void(void)> callback = {});
	std::string GetIconPath(Value<TESObjectWEAP> self, std::function<void(std::string)> callback = {});
	void SetIconPath(Value<TESObjectWEAP> self, std::string path, std::function<void(void)> callback = {});
	std::string GetMessageIconPath(Value<TESObjectWEAP> self, std::function<void(std::string)> callback = {});
	void SetMessageIconPath(Value<TESObjectWEAP> self, std::string path, std::function<void(void)> callback = {});
	Value<EnchantmentItem> GetEnchantment(Value<TESObjectWEAP> self, std::function<void(Value<EnchantmentItem>)> callback = {});
	void SetEnchantment(Value<TESObjectWEAP> self, Value<EnchantmentItem> e, std::function<void(void)> callback = {});
	SInt32 GetEnchantmentValue(Value<TESObjectWEAP> self, std::function<void(SInt32)> callback = {});
	void SetEnchantmentValue(Value<TESObjectWEAP> self, SInt32 value, std::function<void(void)> callback = {});
	Value<TESObjectSTAT> GetEquippedModel(Value<TESObjectWEAP> self, std::function<void(Value<TESObjectSTAT>)> callback = {});
	void SetEquippedModel(Value<TESObjectWEAP> self, Value<TESObjectSTAT> model, std::function<void(void)> callback = {});
	Value<BGSEquipSlot> GetEquipType(Value<TESObjectWEAP> self, std::function<void(Value<BGSEquipSlot>)> callback = {});
	void SetEquipType(Value<TESObjectWEAP> self, Value<BGSEquipSlot> type, std::function<void(void)> callback = {});
	std::string GetSkill(Value<TESObjectWEAP> self, std::function<void(std::string)> callback = {});
	void SetSkill(Value<TESObjectWEAP> self, std::string skill, std::function<void(void)> callback = {});
	std::string GetResist(Value<TESObjectWEAP> self, std::function<void(std::string)> callback = {});
	void SetResist(Value<TESObjectWEAP> self, std::string resist, std::function<void(void)> callback = {});
	Value<SpellItem> GetCritEffect(Value<TESObjectWEAP> self, std::function<void(Value<SpellItem>)> callback = {});
	void SetCritEffect(Value<TESObjectWEAP> self, Value<SpellItem> ce, std::function<void(void)> callback = {});
	bool GetCritEffectOnDeath(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	void SetCritEffectOnDeath(Value<TESObjectWEAP> self, bool ceod, std::function<void(void)> callback = {});
	float GetCritMultiplier(Value<TESObjectWEAP> self, std::function<void(float)> callback = {});
	void SetCritMultiplier(Value<TESObjectWEAP> self, float crit, std::function<void(void)> callback = {});
	Value<TESObjectWEAP> GetTemplate(Value<TESObjectWEAP> self, std::function<void(Value<TESObjectWEAP>)> callback = {});
	bool IsBattleaxe(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	bool IsBow(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	bool IsDagger(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	bool IsGreatsword(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	bool IsMace(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	bool IsStaff(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	bool IsSword(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	bool IsWarhammer(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	bool IsWarAxe(Value<TESObjectWEAP> self, std::function<void(bool)> callback = {});
	void ReleaseOverride(std::function<void(void)> callback = {});
	void ForceActive(Value<TESWeather> self, bool abOverride, std::function<void(void)> callback = {});
	void SetActive(Value<TESWeather> self, bool abOverride, bool abAccelerate, std::function<void(void)> callback = {});
	Value<TESWeather> FindWeather(SInt32 auiType, std::function<void(Value<TESWeather>)> callback = {});
	SInt32 GetClassification(Value<TESWeather> self, std::function<void(SInt32)> callback = {});
	Value<TESWeather> GetCurrentWeather(std::function<void(Value<TESWeather>)> callback = {});
	Value<TESWeather> GetOutgoingWeather(std::function<void(Value<TESWeather>)> callback = {});
	float GetCurrentWeatherTransition(std::function<void(float)> callback = {});
	SInt32 GetSkyMode(std::function<void(SInt32)> callback = {});
	float GetSunGlare(Value<TESWeather> self, std::function<void(float)> callback = {});
	float GetSunDamage(Value<TESWeather> self, std::function<void(float)> callback = {});
	float GetWindDirection(Value<TESWeather> self, std::function<void(float)> callback = {});
	float GetWindDirectionRange(Value<TESWeather> self, std::function<void(float)> callback = {});
	float GetFogDistance(Value<TESWeather> self, bool day, SInt32 type, std::function<void(float)> callback = {});

	UInt32 GetFormID(Value<TESForm> self, std::function<void(UInt32)> callback = {});
	Value<TESForm> GetForm(UInt32 aiFormID, std::function<void(Value<TESForm>)> callback = {});
	Value<Actor> GetPlayer(std::function<void(Value<Actor>)> callback = {});

	float GetPositionX(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	float GetPositionY(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	float GetPositionZ(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	NiPoint3 GetPosition(Value<TESObjectREFR> self, std::function<void(NiPoint3)> callback = {});

	float GetAngleX(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	float GetAngleY(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	float GetAngleZ(Value<TESObjectREFR> self, std::function<void(float)> callback = {});
	NiPoint3 GetAngle(Value<TESObjectREFR> self, std::function<void(NiPoint3)> callback = {});

	bool IsSneaking(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsRunning(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsSprinting(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsTrespassing(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsUnconscious(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsWeaponDrawn(Value<Actor> self, std::function<void(bool)> callback = {});
	bool IsSwimming(Value<Actor> self, std::function<void(bool)> callback = {});

	UInt32 GetAVID(std::string actorValueName, std::function<void(UInt32)> callback = {});
	float GetBaseAV(Value<Actor> self, UInt32 avid, std::function<void(float)> callback = {});
	void SetBaseAV(Value<Actor> self, UInt32 avid, float value, std::function<void(void)> callback = {});
	void ModBaseAV(Value<Actor> self, UInt32 avid, float value, bool colored = true, std::function<void(void)> callback = {});
	float GetCurrentAV(Value<Actor> self, UInt32 avid, std::function<void(float)> callback = {});
	void SetCurrentAV(Value<Actor> self, UInt32 avid, float value, std::function<void(void)> callback = {});
	void ModCurrentAV(Value<Actor> self, UInt32 avid, float value, std::function<void(void)> callback = {});

	Value<TESObjectREFR> GetCurrentCrosshairRef(std::function<void(Value<TESObjectREFR>)> callback = {});
	Value<TESObjectREFR> GetCurrentConsoleRef(std::function<void(Value<TESObjectREFR>)> callback = {});

	FormType GetFormTypeID(Value<TESForm> self, std::function<void(FormType)> callback = {});
	Value<TESForm> GetBaseObject(Value<TESObjectREFR> self, std::function<void(Value<TESForm>)> callback = {});
}